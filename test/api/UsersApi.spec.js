/**
 * Cherwell Rest API
 * <a href=\"../../index.html\">Cherwell Rest API Documentation</a><br>Select version options from the header drop-down list (to the left of the Client Key box). Then, click Explore to view different versions of operations.
 *
 * OpenAPI spec version: 9.2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CherwellRestApi);
  }
}(this, function(expect, CherwellRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CherwellRestApi.UsersApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UsersApi', function() {
    describe('usersDeleteUserBatchV1', function() {
      it('should call usersDeleteUserBatchV1 successfully', function(done) {
        //uncomment below and update the code to test usersDeleteUserBatchV1
        //instance.usersDeleteUserBatchV1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersDeleteUserBatchV2', function() {
      it('should call usersDeleteUserBatchV2 successfully', function(done) {
        //uncomment below and update the code to test usersDeleteUserBatchV2
        //instance.usersDeleteUserBatchV2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersDeleteUserV1', function() {
      it('should call usersDeleteUserV1 successfully', function(done) {
        //uncomment below and update the code to test usersDeleteUserV1
        //instance.usersDeleteUserV1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersDeleteUserV2', function() {
      it('should call usersDeleteUserV2 successfully', function(done) {
        //uncomment below and update the code to test usersDeleteUserV2
        //instance.usersDeleteUserV2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersGetListOfUsers', function() {
      it('should call usersGetListOfUsers successfully', function(done) {
        //uncomment below and update the code to test usersGetListOfUsers
        //instance.usersGetListOfUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersGetUserBatchV1', function() {
      it('should call usersGetUserBatchV1 successfully', function(done) {
        //uncomment below and update the code to test usersGetUserBatchV1
        //instance.usersGetUserBatchV1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersGetUserByLoginIdV1', function() {
      it('should call usersGetUserByLoginIdV1 successfully', function(done) {
        //uncomment below and update the code to test usersGetUserByLoginIdV1
        //instance.usersGetUserByLoginIdV1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersGetUserByLoginIdV2', function() {
      it('should call usersGetUserByLoginIdV2 successfully', function(done) {
        //uncomment below and update the code to test usersGetUserByLoginIdV2
        //instance.usersGetUserByLoginIdV2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersGetUserByLoginIdV3', function() {
      it('should call usersGetUserByLoginIdV3 successfully', function(done) {
        //uncomment below and update the code to test usersGetUserByLoginIdV3
        //instance.usersGetUserByLoginIdV3(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersGetUserByPublicIdV1', function() {
      it('should call usersGetUserByPublicIdV1 successfully', function(done) {
        //uncomment below and update the code to test usersGetUserByPublicIdV1
        //instance.usersGetUserByPublicIdV1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersGetUserByPublicIdV2', function() {
      it('should call usersGetUserByPublicIdV2 successfully', function(done) {
        //uncomment below and update the code to test usersGetUserByPublicIdV2
        //instance.usersGetUserByPublicIdV2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersGetUserByRecId', function() {
      it('should call usersGetUserByRecId successfully', function(done) {
        //uncomment below and update the code to test usersGetUserByRecId
        //instance.usersGetUserByRecId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersSaveUserBatchV1', function() {
      it('should call usersSaveUserBatchV1 successfully', function(done) {
        //uncomment below and update the code to test usersSaveUserBatchV1
        //instance.usersSaveUserBatchV1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersSaveUserBatchV2', function() {
      it('should call usersSaveUserBatchV2 successfully', function(done) {
        //uncomment below and update the code to test usersSaveUserBatchV2
        //instance.usersSaveUserBatchV2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersSaveUserV1', function() {
      it('should call usersSaveUserV1 successfully', function(done) {
        //uncomment below and update the code to test usersSaveUserV1
        //instance.usersSaveUserV1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usersSaveUserV2', function() {
      it('should call usersSaveUserV2 successfully', function(done) {
        //uncomment below and update the code to test usersSaveUserV2
        //instance.usersSaveUserV2(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
