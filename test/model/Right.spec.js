/**
 * Cherwell Rest API
 * <a href=\"../../index.html\">Cherwell Rest API Documentation</a><br>Select version options from the header drop-down list (to the left of the Client Key box). Then, click Explore to view different versions of operations.
 *
 * OpenAPI spec version: 9.2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CherwellRestApi);
  }
}(this, function(expect, CherwellRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CherwellRestApi.Right();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Right', function() {
    it('should create an instance of Right', function() {
      // uncomment below and update the code to test Right
      //var instance = new CherwellRestApi.Right();
      //expect(instance).to.be.a(CherwellRestApi.Right);
    });

    it('should have the property add (base name: "add")', function() {
      // uncomment below and update the code to test the property add
      //var instance = new CherwellRestApi.Right();
      //expect(instance).to.be();
    });

    it('should have the property allow (base name: "allow")', function() {
      // uncomment below and update the code to test the property allow
      //var instance = new CherwellRestApi.Right();
      //expect(instance).to.be();
    });

    it('should have the property categoryDescription (base name: "categoryDescription")', function() {
      // uncomment below and update the code to test the property categoryDescription
      //var instance = new CherwellRestApi.Right();
      //expect(instance).to.be();
    });

    it('should have the property categoryId (base name: "categoryId")', function() {
      // uncomment below and update the code to test the property categoryId
      //var instance = new CherwellRestApi.Right();
      //expect(instance).to.be();
    });

    it('should have the property categoryName (base name: "categoryName")', function() {
      // uncomment below and update the code to test the property categoryName
      //var instance = new CherwellRestApi.Right();
      //expect(instance).to.be();
    });

    it('should have the property _delete (base name: "delete")', function() {
      // uncomment below and update the code to test the property _delete
      //var instance = new CherwellRestApi.Right();
      //expect(instance).to.be();
    });

    it('should have the property edit (base name: "edit")', function() {
      // uncomment below and update the code to test the property edit
      //var instance = new CherwellRestApi.Right();
      //expect(instance).to.be();
    });

    it('should have the property isYesNoRight (base name: "isYesNoRight")', function() {
      // uncomment below and update the code to test the property isYesNoRight
      //var instance = new CherwellRestApi.Right();
      //expect(instance).to.be();
    });

    it('should have the property nonScopeOwnerAdd (base name: "nonScopeOwnerAdd")', function() {
      // uncomment below and update the code to test the property nonScopeOwnerAdd
      //var instance = new CherwellRestApi.Right();
      //expect(instance).to.be();
    });

    it('should have the property nonScopeOwnerDelete (base name: "nonScopeOwnerDelete")', function() {
      // uncomment below and update the code to test the property nonScopeOwnerDelete
      //var instance = new CherwellRestApi.Right();
      //expect(instance).to.be();
    });

    it('should have the property nonScopeOwnerEdit (base name: "nonScopeOwnerEdit")', function() {
      // uncomment below and update the code to test the property nonScopeOwnerEdit
      //var instance = new CherwellRestApi.Right();
      //expect(instance).to.be();
    });

    it('should have the property nonScopeOwnerView (base name: "nonScopeOwnerView")', function() {
      // uncomment below and update the code to test the property nonScopeOwnerView
      //var instance = new CherwellRestApi.Right();
      //expect(instance).to.be();
    });

    it('should have the property rightId (base name: "rightId")', function() {
      // uncomment below and update the code to test the property rightId
      //var instance = new CherwellRestApi.Right();
      //expect(instance).to.be();
    });

    it('should have the property rightName (base name: "rightName")', function() {
      // uncomment below and update the code to test the property rightName
      //var instance = new CherwellRestApi.Right();
      //expect(instance).to.be();
    });

    it('should have the property standardRightName (base name: "standardRightName")', function() {
      // uncomment below and update the code to test the property standardRightName
      //var instance = new CherwellRestApi.Right();
      //expect(instance).to.be();
    });

    it('should have the property viewRunOpen (base name: "viewRunOpen")', function() {
      // uncomment below and update the code to test the property viewRunOpen
      //var instance = new CherwellRestApi.Right();
      //expect(instance).to.be();
    });

  });

}));
