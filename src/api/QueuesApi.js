/**
 * Cherwell Rest API
 * <a href=\"../../index.html\">Cherwell Rest API Documentation</a><br>Select version options from the header drop-down list (to the left of the Client Key box). Then, click Explore to view different versions of operations.
 *
 * OpenAPI spec version: 9.2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AddItemToQueueRequest', 'model/AddItemToQueueResponse', 'model/CheckInQueueItemRequest', 'model/CheckInQueueItemResponse', 'model/CheckOutQueueItemRequest', 'model/CheckOutQueueItemResponse', 'model/ManagerData', 'model/RemoveItemFromQueueRequest', 'model/RemoveItemFromQueueResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AddItemToQueueRequest'), require('../model/AddItemToQueueResponse'), require('../model/CheckInQueueItemRequest'), require('../model/CheckInQueueItemResponse'), require('../model/CheckOutQueueItemRequest'), require('../model/CheckOutQueueItemResponse'), require('../model/ManagerData'), require('../model/RemoveItemFromQueueRequest'), require('../model/RemoveItemFromQueueResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.CherwellRestApi) {
      root.CherwellRestApi = {};
    }
    root.CherwellRestApi.QueuesApi = factory(root.CherwellRestApi.ApiClient, root.CherwellRestApi.AddItemToQueueRequest, root.CherwellRestApi.AddItemToQueueResponse, root.CherwellRestApi.CheckInQueueItemRequest, root.CherwellRestApi.CheckInQueueItemResponse, root.CherwellRestApi.CheckOutQueueItemRequest, root.CherwellRestApi.CheckOutQueueItemResponse, root.CherwellRestApi.ManagerData, root.CherwellRestApi.RemoveItemFromQueueRequest, root.CherwellRestApi.RemoveItemFromQueueResponse);
  }
}(this, function(ApiClient, AddItemToQueueRequest, AddItemToQueueResponse, CheckInQueueItemRequest, CheckInQueueItemResponse, CheckOutQueueItemRequest, CheckOutQueueItemResponse, ManagerData, RemoveItemFromQueueRequest, RemoveItemFromQueueResponse) {
  'use strict';

  /**
   * Queues service.
   * @module api/QueuesApi
   * @version 9.2.0
   */

  /**
   * Constructs a new QueuesApi. 
   * @alias module:api/QueuesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the queuesAddItemToQueueV1 operation.
     * @callback module:api/QueuesApi~queuesAddItemToQueueV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AddItemToQueueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a Business Object to a queue
     * Operation to add a business object to a queue
     * @param {module:model/AddItemToQueueRequest} request Request object containing all properties necessary to add an item to a queue. All properties are required. The standin key defines the queue to which we want to add the business object.
     * @param {module:api/QueuesApi~queuesAddItemToQueueV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddItemToQueueResponse}
     */
    this.queuesAddItemToQueueV1 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling queuesAddItemToQueueV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = AddItemToQueueResponse;

      return this.apiClient.callApi(
        '/api/V1/additemtoqueue', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the queuesCheckInQueueItemV1 operation.
     * @callback module:api/QueuesApi~queuesCheckInQueueItemV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckInQueueItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check a Business Object in to a queue
     * Operation to check in a queue item
     * @param {module:model/CheckInQueueItemRequest} request The request object for checking in an item to a queue. All properties are required except for historyNotes
     * @param {module:api/QueuesApi~queuesCheckInQueueItemV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckInQueueItemResponse}
     */
    this.queuesCheckInQueueItemV1 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling queuesCheckInQueueItemV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = CheckInQueueItemResponse;

      return this.apiClient.callApi(
        '/api/V1/checkinqueueitem', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the queuesCheckOutQueueItemV1 operation.
     * @callback module:api/QueuesApi~queuesCheckOutQueueItemV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckOutQueueItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check a Business Object out of a queue
     * Operation to check out a queue item
     * @param {module:model/CheckOutQueueItemRequest} request The request object for checking out an item from a queue. All properties are required except for historyNotes
     * @param {module:api/QueuesApi~queuesCheckOutQueueItemV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckOutQueueItemResponse}
     */
    this.queuesCheckOutQueueItemV1 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling queuesCheckOutQueueItemV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = CheckOutQueueItemResponse;

      return this.apiClient.callApi(
        '/api/V1/checkoutqueueitem', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the queuesGetQueuesFolderV1 operation.
     * @callback module:api/QueuesApi~queuesGetQueuesFolderV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available queues.
     * Get available queues for a specific business object type based on scope, scope owner, and folder.
     * @param {String} scope The scope to get available queues for.
     * @param {String} scopeowner The scope owner to get available queues for.
     * @param {String} folder The folder to get available queues for.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.links Whether or not to include links.
     * @param {module:api/QueuesApi~queuesGetQueuesFolderV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerData}
     */
    this.queuesGetQueuesFolderV1 = function(scope, scopeowner, folder, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling queuesGetQueuesFolderV1");
      }

      // verify the required parameter 'scopeowner' is set
      if (scopeowner === undefined || scopeowner === null) {
        throw new Error("Missing the required parameter 'scopeowner' when calling queuesGetQueuesFolderV1");
      }

      // verify the required parameter 'folder' is set
      if (folder === undefined || folder === null) {
        throw new Error("Missing the required parameter 'folder' when calling queuesGetQueuesFolderV1");
      }


      var pathParams = {
        'scope': scope,
        'scopeowner': scopeowner,
        'folder': folder
      };
      var queryParams = {
        'links': opts['links'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ManagerData;

      return this.apiClient.callApi(
        '/api/V1/getqueues/scope/{scope}/scopeowner/{scopeowner}/folder/{folder}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the queuesGetQueuesScopeOwnerV1 operation.
     * @callback module:api/QueuesApi~queuesGetQueuesScopeOwnerV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available queues.
     * Get available queues for a specific business object type based on scope, and scope owner.
     * @param {String} scope The scope to get available queues for.
     * @param {String} scopeowner The scope owner to get available queues for.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.links Whether or not to include links.
     * @param {module:api/QueuesApi~queuesGetQueuesScopeOwnerV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerData}
     */
    this.queuesGetQueuesScopeOwnerV1 = function(scope, scopeowner, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling queuesGetQueuesScopeOwnerV1");
      }

      // verify the required parameter 'scopeowner' is set
      if (scopeowner === undefined || scopeowner === null) {
        throw new Error("Missing the required parameter 'scopeowner' when calling queuesGetQueuesScopeOwnerV1");
      }


      var pathParams = {
        'scope': scope,
        'scopeowner': scopeowner
      };
      var queryParams = {
        'links': opts['links'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ManagerData;

      return this.apiClient.callApi(
        '/api/V1/getqueues/scope/{scope}/scopeowner/{scopeowner}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the queuesGetQueuesScopeV1 operation.
     * @callback module:api/QueuesApi~queuesGetQueuesScopeV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available queues.
     * Get available queues for a specific business object type based on scope.
     * @param {String} scope The scope to get available queues for.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.links Whether or not to include links.
     * @param {module:api/QueuesApi~queuesGetQueuesScopeV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerData}
     */
    this.queuesGetQueuesScopeV1 = function(scope, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling queuesGetQueuesScopeV1");
      }


      var pathParams = {
        'scope': scope
      };
      var queryParams = {
        'links': opts['links'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ManagerData;

      return this.apiClient.callApi(
        '/api/V1/getqueues/scope/{scope}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the queuesGetQueuesV1 operation.
     * @callback module:api/QueuesApi~queuesGetQueuesV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available queues.
     * Get available queues for a specific business object.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.links Whether or not to include links.
     * @param {module:api/QueuesApi~queuesGetQueuesV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerData}
     */
    this.queuesGetQueuesV1 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'links': opts['links'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ManagerData;

      return this.apiClient.callApi(
        '/api/V1/getqueues', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the queuesRemoveItemFromQueueV1 operation.
     * @callback module:api/QueuesApi~queuesRemoveItemFromQueueV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveItemFromQueueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an item from a queue
     * Operation to remove an item from a queue
     * @param {module:model/RemoveItemFromQueueRequest} request The request object to remove an item from a queue. All properties are required except for historyNotes
     * @param {module:api/QueuesApi~queuesRemoveItemFromQueueV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveItemFromQueueResponse}
     */
    this.queuesRemoveItemFromQueueV1 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling queuesRemoveItemFromQueueV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RemoveItemFromQueueResponse;

      return this.apiClient.callApi(
        '/api/V1/removeitemfromqueue', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
