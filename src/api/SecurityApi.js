/**
 * Cherwell Rest API
 * <a href=\"../../index.html\">Cherwell Rest API Documentation</a><br>Select version options from the header drop-down list (to the left of the Client Key box). Then, click Explore to view different versions of operations.
 *
 * OpenAPI spec version: 9.2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/BusinessObjectPermission', 'model/ClientSecuritySettingsResponse', 'model/GetSecurityGroupBusinessObjectPermissionsResponse', 'model/Right', 'model/RightCategory', 'model/RoleReadResponse', 'model/RoleReadV2Response', 'model/SecurityGroupResponse', 'model/SecurityGroupV2Response', 'model/SecurityRightCategoriesResponse', 'model/SecurityRightsResponse', 'model/User', 'model/UserReadV2Response'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/BusinessObjectPermission'), require('../model/ClientSecuritySettingsResponse'), require('../model/GetSecurityGroupBusinessObjectPermissionsResponse'), require('../model/Right'), require('../model/RightCategory'), require('../model/RoleReadResponse'), require('../model/RoleReadV2Response'), require('../model/SecurityGroupResponse'), require('../model/SecurityGroupV2Response'), require('../model/SecurityRightCategoriesResponse'), require('../model/SecurityRightsResponse'), require('../model/User'), require('../model/UserReadV2Response'));
  } else {
    // Browser globals (root is window)
    if (!root.CherwellRestApi) {
      root.CherwellRestApi = {};
    }
    root.CherwellRestApi.SecurityApi = factory(root.CherwellRestApi.ApiClient, root.CherwellRestApi.BusinessObjectPermission, root.CherwellRestApi.ClientSecuritySettingsResponse, root.CherwellRestApi.GetSecurityGroupBusinessObjectPermissionsResponse, root.CherwellRestApi.Right, root.CherwellRestApi.RightCategory, root.CherwellRestApi.RoleReadResponse, root.CherwellRestApi.RoleReadV2Response, root.CherwellRestApi.SecurityGroupResponse, root.CherwellRestApi.SecurityGroupV2Response, root.CherwellRestApi.SecurityRightCategoriesResponse, root.CherwellRestApi.SecurityRightsResponse, root.CherwellRestApi.User, root.CherwellRestApi.UserReadV2Response);
  }
}(this, function(ApiClient, BusinessObjectPermission, ClientSecuritySettingsResponse, GetSecurityGroupBusinessObjectPermissionsResponse, Right, RightCategory, RoleReadResponse, RoleReadV2Response, SecurityGroupResponse, SecurityGroupV2Response, SecurityRightCategoriesResponse, SecurityRightsResponse, User, UserReadV2Response) {
  'use strict';

  /**
   * Security service.
   * @module api/SecurityApi
   * @version 9.2.0
   */

  /**
   * Constructs a new SecurityApi. 
   * @alias module:api/SecurityApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the securityGetClientSecuritySettingsV1 operation.
     * @callback module:api/SecurityApi~securityGetClientSecuritySettingsV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ClientSecuritySettingsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/String} applicationtype 
     * @param {module:api/SecurityApi~securityGetClientSecuritySettingsV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ClientSecuritySettingsResponse}
     */
    this.securityGetClientSecuritySettingsV1 = function(applicationtype, callback) {
      var postBody = null;

      // verify the required parameter 'applicationtype' is set
      if (applicationtype === undefined || applicationtype === null) {
        throw new Error("Missing the required parameter 'applicationtype' when calling securityGetClientSecuritySettingsV1");
      }


      var pathParams = {
        'applicationtype': applicationtype
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ClientSecuritySettingsResponse;

      return this.apiClient.callApi(
        '/api/V1/getclientsecuritysettings/applicationtype/{applicationtype}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the securityGetRolesV1 operation.
     * @callback module:api/SecurityApi~securityGetRolesV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleReadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all available Roles
     * Operation to get all available Roles.
     * @param {module:api/SecurityApi~securityGetRolesV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleReadResponse}
     */
    this.securityGetRolesV1 = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RoleReadResponse;

      return this.apiClient.callApi(
        '/api/V1/getroles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the securityGetRolesV2 operation.
     * @callback module:api/SecurityApi~securityGetRolesV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleReadV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all available Roles
     * Operation to get all available Roles.
     * @param {module:api/SecurityApi~securityGetRolesV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleReadV2Response}
     */
    this.securityGetRolesV2 = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RoleReadV2Response;

      return this.apiClient.callApi(
        '/api/V2/getroles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the securityGetSecurityGroupBusinessObjectPermissionsByBusObIdV1 operation.
     * @callback module:api/SecurityApi~securityGetSecurityGroupBusinessObjectPermissionsByBusObIdV1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BusinessObjectPermission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Business Object permissions by Security Group
     * Operation to get specific Business Object permissions for a Security Group. 
     * @param {String} groupid Specify the Security Group ID. 
     * @param {String} busObId Specify the Business Object ID.
     * @param {module:api/SecurityApi~securityGetSecurityGroupBusinessObjectPermissionsByBusObIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BusinessObjectPermission>}
     */
    this.securityGetSecurityGroupBusinessObjectPermissionsByBusObIdV1 = function(groupid, busObId, callback) {
      var postBody = null;

      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling securityGetSecurityGroupBusinessObjectPermissionsByBusObIdV1");
      }

      // verify the required parameter 'busObId' is set
      if (busObId === undefined || busObId === null) {
        throw new Error("Missing the required parameter 'busObId' when calling securityGetSecurityGroupBusinessObjectPermissionsByBusObIdV1");
      }


      var pathParams = {
        'groupid': groupid,
        'busObId': busObId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [BusinessObjectPermission];

      return this.apiClient.callApi(
        '/api/V1/getsecuritygroupbusinessobjectpermissions/groupid/{groupid}/busobid/{busObId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the securityGetSecurityGroupBusinessObjectPermissionsByBusObIdV2 operation.
     * @callback module:api/SecurityApi~securityGetSecurityGroupBusinessObjectPermissionsByBusObIdV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSecurityGroupBusinessObjectPermissionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Business Object permissions by Security Group
     * Operation to get specific Business Object permissions for a Security Group. 
     * @param {String} groupid Specify the Security Group ID. 
     * @param {String} busObId Specify the Business Object ID.
     * @param {module:api/SecurityApi~securityGetSecurityGroupBusinessObjectPermissionsByBusObIdV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSecurityGroupBusinessObjectPermissionsResponse}
     */
    this.securityGetSecurityGroupBusinessObjectPermissionsByBusObIdV2 = function(groupid, busObId, callback) {
      var postBody = null;

      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling securityGetSecurityGroupBusinessObjectPermissionsByBusObIdV2");
      }

      // verify the required parameter 'busObId' is set
      if (busObId === undefined || busObId === null) {
        throw new Error("Missing the required parameter 'busObId' when calling securityGetSecurityGroupBusinessObjectPermissionsByBusObIdV2");
      }


      var pathParams = {
        'groupid': groupid,
        'busObId': busObId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetSecurityGroupBusinessObjectPermissionsResponse;

      return this.apiClient.callApi(
        '/api/V2/getsecuritygroupbusinessobjectpermissions/groupid/{groupid}/busobid/{busObId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the securityGetSecurityGroupBusinessObjectPermissionsByBusObNameV1 operation.
     * @callback module:api/SecurityApi~securityGetSecurityGroupBusinessObjectPermissionsByBusObNameV1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BusinessObjectPermission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Business Object permissions by Security Group
     * Operation to get specific Business Object permissions for a Security Group. 
     * @param {String} groupname Specify the Security Group name. 
     * @param {String} busobname Specify the Business Object name.
     * @param {module:api/SecurityApi~securityGetSecurityGroupBusinessObjectPermissionsByBusObNameV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BusinessObjectPermission>}
     */
    this.securityGetSecurityGroupBusinessObjectPermissionsByBusObNameV1 = function(groupname, busobname, callback) {
      var postBody = null;

      // verify the required parameter 'groupname' is set
      if (groupname === undefined || groupname === null) {
        throw new Error("Missing the required parameter 'groupname' when calling securityGetSecurityGroupBusinessObjectPermissionsByBusObNameV1");
      }

      // verify the required parameter 'busobname' is set
      if (busobname === undefined || busobname === null) {
        throw new Error("Missing the required parameter 'busobname' when calling securityGetSecurityGroupBusinessObjectPermissionsByBusObNameV1");
      }


      var pathParams = {
        'groupname': groupname,
        'busobname': busobname
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [BusinessObjectPermission];

      return this.apiClient.callApi(
        '/api/V1/getsecuritygroupbusinessobjectpermissions/groupname/{groupname}/busobname/{busobname}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the securityGetSecurityGroupBusinessObjectPermissionsByBusObNameV2 operation.
     * @callback module:api/SecurityApi~securityGetSecurityGroupBusinessObjectPermissionsByBusObNameV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSecurityGroupBusinessObjectPermissionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Business Object permissions by Security Group
     * Operation to get specific Business Object permissions for a Security Group. 
     * @param {String} groupname Specify the Security Group name. 
     * @param {String} busobname Specify the Business Object name.
     * @param {module:api/SecurityApi~securityGetSecurityGroupBusinessObjectPermissionsByBusObNameV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSecurityGroupBusinessObjectPermissionsResponse}
     */
    this.securityGetSecurityGroupBusinessObjectPermissionsByBusObNameV2 = function(groupname, busobname, callback) {
      var postBody = null;

      // verify the required parameter 'groupname' is set
      if (groupname === undefined || groupname === null) {
        throw new Error("Missing the required parameter 'groupname' when calling securityGetSecurityGroupBusinessObjectPermissionsByBusObNameV2");
      }

      // verify the required parameter 'busobname' is set
      if (busobname === undefined || busobname === null) {
        throw new Error("Missing the required parameter 'busobname' when calling securityGetSecurityGroupBusinessObjectPermissionsByBusObNameV2");
      }


      var pathParams = {
        'groupname': groupname,
        'busobname': busobname
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetSecurityGroupBusinessObjectPermissionsResponse;

      return this.apiClient.callApi(
        '/api/V2/getsecuritygroupbusinessobjectpermissions/groupname/{groupname}/busobname/{busobname}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the securityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV1 operation.
     * @callback module:api/SecurityApi~securityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BusinessObjectPermission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Business Object permission for current user
     * Operation to get Business Object permissions for the currently logged-in user&#39;s Security Group.
     * @param {String} busObId Specify the Business Object ID.
     * @param {module:api/SecurityApi~securityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BusinessObjectPermission>}
     */
    this.securityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV1 = function(busObId, callback) {
      var postBody = null;

      // verify the required parameter 'busObId' is set
      if (busObId === undefined || busObId === null) {
        throw new Error("Missing the required parameter 'busObId' when calling securityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV1");
      }


      var pathParams = {
        'busObId': busObId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [BusinessObjectPermission];

      return this.apiClient.callApi(
        '/api/V1/getsecuritygroupbusinessobjectpermissionsforcurrentuserbybusobid/busobid/{busObId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the securityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV2 operation.
     * @callback module:api/SecurityApi~securityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSecurityGroupBusinessObjectPermissionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Business Object permission for current user
     * Operation to get Business Object permissions for the currently logged-in user&#39;s Security Group.
     * @param {String} busObId Specify the Business Object ID.
     * @param {module:api/SecurityApi~securityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSecurityGroupBusinessObjectPermissionsResponse}
     */
    this.securityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV2 = function(busObId, callback) {
      var postBody = null;

      // verify the required parameter 'busObId' is set
      if (busObId === undefined || busObId === null) {
        throw new Error("Missing the required parameter 'busObId' when calling securityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObIdV2");
      }


      var pathParams = {
        'busObId': busObId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetSecurityGroupBusinessObjectPermissionsResponse;

      return this.apiClient.callApi(
        '/api/V2/getsecuritygroupbusinessobjectpermissionsforcurrentuserbybusobid/busobid/{busObId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the securityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV1 operation.
     * @callback module:api/SecurityApi~securityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BusinessObjectPermission>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Business Object permissions for current user
     * Operation to get Business Object permissions for currently logged in user&#39;s Security Group.
     * @param {String} busobname Specify the Business Object name.
     * @param {module:api/SecurityApi~securityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BusinessObjectPermission>}
     */
    this.securityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV1 = function(busobname, callback) {
      var postBody = null;

      // verify the required parameter 'busobname' is set
      if (busobname === undefined || busobname === null) {
        throw new Error("Missing the required parameter 'busobname' when calling securityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV1");
      }


      var pathParams = {
        'busobname': busobname
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [BusinessObjectPermission];

      return this.apiClient.callApi(
        '/api/V1/getsecuritygroupbusinessobjectpermissionsforcurrentuserbybusobname/busobname/{busobname}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the securityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV2 operation.
     * @callback module:api/SecurityApi~securityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/GetSecurityGroupBusinessObjectPermissionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Business Object permissions for current user
     * Operation to get Business Object permissions for currently logged in user&#39;s Security Group.
     * @param {String} busobname Specify the Business Object name.
     * @param {module:api/SecurityApi~securityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetSecurityGroupBusinessObjectPermissionsResponse}
     */
    this.securityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV2 = function(busobname, callback) {
      var postBody = null;

      // verify the required parameter 'busobname' is set
      if (busobname === undefined || busobname === null) {
        throw new Error("Missing the required parameter 'busobname' when calling securityGetSecurityGroupBusinessObjectPermissionsForCurrentUserByBusObNameV2");
      }


      var pathParams = {
        'busobname': busobname
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = GetSecurityGroupBusinessObjectPermissionsResponse;

      return this.apiClient.callApi(
        '/api/V2/getsecuritygroupbusinessobjectpermissionsforcurrentuserbybusobname/busobname/{busobname}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the securityGetSecurityGroupCategoriesV1 operation.
     * @callback module:api/SecurityApi~securityGetSecurityGroupCategoriesV1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RightCategory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Security Group categories
     * Operation to get IDs and names for all available Security Group categories. 
     * @param {module:api/SecurityApi~securityGetSecurityGroupCategoriesV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RightCategory>}
     */
    this.securityGetSecurityGroupCategoriesV1 = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [RightCategory];

      return this.apiClient.callApi(
        '/api/V1/getsecuritygroupcategories', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the securityGetSecurityGroupCategoriesV2 operation.
     * @callback module:api/SecurityApi~securityGetSecurityGroupCategoriesV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityRightCategoriesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Security Group categories
     * Operation to get IDs and names for all available Security Group categories. 
     * @param {module:api/SecurityApi~securityGetSecurityGroupCategoriesV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityRightCategoriesResponse}
     */
    this.securityGetSecurityGroupCategoriesV2 = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SecurityRightCategoriesResponse;

      return this.apiClient.callApi(
        '/api/V2/getsecuritygroupcategories', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the securityGetSecurityGroupRightsByGroupIdAndCategoryIdV1 operation.
     * @callback module:api/SecurityApi~securityGetSecurityGroupRightsByGroupIdAndCategoryIdV1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Right>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get permissions for a Security Group by category
     * Operation to get permissions for a Security Group by category. To get Security Group IDs, use \&quot;Get all available Security Groups.\&quot; To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
     * @param {String} groupid Specify the Security Group ID
     * @param {String} categoryid Specify the Security Group category ID
     * @param {module:api/SecurityApi~securityGetSecurityGroupRightsByGroupIdAndCategoryIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Right>}
     */
    this.securityGetSecurityGroupRightsByGroupIdAndCategoryIdV1 = function(groupid, categoryid, callback) {
      var postBody = null;

      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling securityGetSecurityGroupRightsByGroupIdAndCategoryIdV1");
      }

      // verify the required parameter 'categoryid' is set
      if (categoryid === undefined || categoryid === null) {
        throw new Error("Missing the required parameter 'categoryid' when calling securityGetSecurityGroupRightsByGroupIdAndCategoryIdV1");
      }


      var pathParams = {
        'groupid': groupid,
        'categoryid': categoryid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [Right];

      return this.apiClient.callApi(
        '/api/V1/getsecuritygrouprights/groupid/{groupid}/categoryid/{categoryid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the securityGetSecurityGroupRightsByGroupIdAndCategoryIdV2 operation.
     * @callback module:api/SecurityApi~securityGetSecurityGroupRightsByGroupIdAndCategoryIdV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityRightsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get permissions for a Security Group by category
     * Operation to get permissions for a Security Group by category. To get Security Group IDs, use \&quot;Get all available Security Groups.\&quot; To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
     * @param {String} groupid Specify the Security Group ID
     * @param {String} categoryid Specify the Security Group category ID
     * @param {module:api/SecurityApi~securityGetSecurityGroupRightsByGroupIdAndCategoryIdV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityRightsResponse}
     */
    this.securityGetSecurityGroupRightsByGroupIdAndCategoryIdV2 = function(groupid, categoryid, callback) {
      var postBody = null;

      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling securityGetSecurityGroupRightsByGroupIdAndCategoryIdV2");
      }

      // verify the required parameter 'categoryid' is set
      if (categoryid === undefined || categoryid === null) {
        throw new Error("Missing the required parameter 'categoryid' when calling securityGetSecurityGroupRightsByGroupIdAndCategoryIdV2");
      }


      var pathParams = {
        'groupid': groupid,
        'categoryid': categoryid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SecurityRightsResponse;

      return this.apiClient.callApi(
        '/api/V2/getsecuritygrouprights/groupid/{groupid}/categoryid/{categoryid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the securityGetSecurityGroupRightsByGroupNameAndCategoryNameV1 operation.
     * @callback module:api/SecurityApi~securityGetSecurityGroupRightsByGroupNameAndCategoryNameV1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Right>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get permissions for a Security Group by category
     * Operation to get permissions for a Security Group by category.
     * @param {String} groupname Specify the Security Group name.
     * @param {String} categoryname Specify the Security Group category name.
     * @param {module:api/SecurityApi~securityGetSecurityGroupRightsByGroupNameAndCategoryNameV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Right>}
     */
    this.securityGetSecurityGroupRightsByGroupNameAndCategoryNameV1 = function(groupname, categoryname, callback) {
      var postBody = null;

      // verify the required parameter 'groupname' is set
      if (groupname === undefined || groupname === null) {
        throw new Error("Missing the required parameter 'groupname' when calling securityGetSecurityGroupRightsByGroupNameAndCategoryNameV1");
      }

      // verify the required parameter 'categoryname' is set
      if (categoryname === undefined || categoryname === null) {
        throw new Error("Missing the required parameter 'categoryname' when calling securityGetSecurityGroupRightsByGroupNameAndCategoryNameV1");
      }


      var pathParams = {
        'groupname': groupname,
        'categoryname': categoryname
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [Right];

      return this.apiClient.callApi(
        '/api/V1/getsecuritygrouprights/groupname/{groupname}/categoryname/{categoryname}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the securityGetSecurityGroupRightsByGroupNameAndCategoryNameV2 operation.
     * @callback module:api/SecurityApi~securityGetSecurityGroupRightsByGroupNameAndCategoryNameV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityRightsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get permissions for a Security Group by category
     * Operation to get permissions for a Security Group by category.
     * @param {String} groupname Specify the Security Group name.
     * @param {String} categoryname Specify the Security Group category name.
     * @param {module:api/SecurityApi~securityGetSecurityGroupRightsByGroupNameAndCategoryNameV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityRightsResponse}
     */
    this.securityGetSecurityGroupRightsByGroupNameAndCategoryNameV2 = function(groupname, categoryname, callback) {
      var postBody = null;

      // verify the required parameter 'groupname' is set
      if (groupname === undefined || groupname === null) {
        throw new Error("Missing the required parameter 'groupname' when calling securityGetSecurityGroupRightsByGroupNameAndCategoryNameV2");
      }

      // verify the required parameter 'categoryname' is set
      if (categoryname === undefined || categoryname === null) {
        throw new Error("Missing the required parameter 'categoryname' when calling securityGetSecurityGroupRightsByGroupNameAndCategoryNameV2");
      }


      var pathParams = {
        'groupname': groupname,
        'categoryname': categoryname
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SecurityRightsResponse;

      return this.apiClient.callApi(
        '/api/V2/getsecuritygrouprights/groupname/{groupname}/categoryname/{categoryname}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the securityGetSecurityGroupRightsForCurrentUserByCategoryIdV1 operation.
     * @callback module:api/SecurityApi~securityGetSecurityGroupRightsForCurrentUserByCategoryIdV1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Right>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current user&#39;s permissions by Security Group category by ID
     * Operation to get permissions for the current user&#39;s Security Group by category. To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
     * @param {String} categoryid Specify the Security Group category ID.
     * @param {module:api/SecurityApi~securityGetSecurityGroupRightsForCurrentUserByCategoryIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Right>}
     */
    this.securityGetSecurityGroupRightsForCurrentUserByCategoryIdV1 = function(categoryid, callback) {
      var postBody = null;

      // verify the required parameter 'categoryid' is set
      if (categoryid === undefined || categoryid === null) {
        throw new Error("Missing the required parameter 'categoryid' when calling securityGetSecurityGroupRightsForCurrentUserByCategoryIdV1");
      }


      var pathParams = {
        'categoryid': categoryid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [Right];

      return this.apiClient.callApi(
        '/api/V1/getsecuritygrouprightsforcurrentuserbycategoryid/categoryid/{categoryid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the securityGetSecurityGroupRightsForCurrentUserByCategoryIdV2 operation.
     * @callback module:api/SecurityApi~securityGetSecurityGroupRightsForCurrentUserByCategoryIdV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityRightsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current user&#39;s permissions by Security Group category by ID
     * Operation to get permissions for the current user&#39;s Security Group by category. To get Security Group category IDs, use \&quot;Get all Security Group categories.\&quot;
     * @param {String} categoryid Specify the Security Group category ID.
     * @param {module:api/SecurityApi~securityGetSecurityGroupRightsForCurrentUserByCategoryIdV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityRightsResponse}
     */
    this.securityGetSecurityGroupRightsForCurrentUserByCategoryIdV2 = function(categoryid, callback) {
      var postBody = null;

      // verify the required parameter 'categoryid' is set
      if (categoryid === undefined || categoryid === null) {
        throw new Error("Missing the required parameter 'categoryid' when calling securityGetSecurityGroupRightsForCurrentUserByCategoryIdV2");
      }


      var pathParams = {
        'categoryid': categoryid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SecurityRightsResponse;

      return this.apiClient.callApi(
        '/api/V2/getsecuritygrouprightsforcurrentuserbycategoryid/categoryid/{categoryid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the securityGetSecurityGroupRightsForCurrentUserByCategoryNameV1 operation.
     * @callback module:api/SecurityApi~securityGetSecurityGroupRightsForCurrentUserByCategoryNameV1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Right>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current user&#39;s permissions by Security Group category by name
     * Operation to get permissions for the current user&#39;s Security Group by category.
     * @param {String} categoryname Specify the Security Group category name.
     * @param {module:api/SecurityApi~securityGetSecurityGroupRightsForCurrentUserByCategoryNameV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Right>}
     */
    this.securityGetSecurityGroupRightsForCurrentUserByCategoryNameV1 = function(categoryname, callback) {
      var postBody = null;

      // verify the required parameter 'categoryname' is set
      if (categoryname === undefined || categoryname === null) {
        throw new Error("Missing the required parameter 'categoryname' when calling securityGetSecurityGroupRightsForCurrentUserByCategoryNameV1");
      }


      var pathParams = {
        'categoryname': categoryname
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [Right];

      return this.apiClient.callApi(
        '/api/V1/getsecuritygrouprightsforcurrentuserbycategoryname/categoryname/{categoryname}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the securityGetSecurityGroupRightsForCurrentUserByCategoryNameV2 operation.
     * @callback module:api/SecurityApi~securityGetSecurityGroupRightsForCurrentUserByCategoryNameV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityRightsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current user&#39;s permissions by Security Group category by name
     * Operation to get permissions for the current user&#39;s Security Group by category.
     * @param {String} categoryname Specify the Security Group category name.
     * @param {module:api/SecurityApi~securityGetSecurityGroupRightsForCurrentUserByCategoryNameV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityRightsResponse}
     */
    this.securityGetSecurityGroupRightsForCurrentUserByCategoryNameV2 = function(categoryname, callback) {
      var postBody = null;

      // verify the required parameter 'categoryname' is set
      if (categoryname === undefined || categoryname === null) {
        throw new Error("Missing the required parameter 'categoryname' when calling securityGetSecurityGroupRightsForCurrentUserByCategoryNameV2");
      }


      var pathParams = {
        'categoryname': categoryname
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SecurityRightsResponse;

      return this.apiClient.callApi(
        '/api/V2/getsecuritygrouprightsforcurrentuserbycategoryname/categoryname/{categoryname}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the securityGetSecurityGroupsV1 operation.
     * @callback module:api/SecurityApi~securityGetSecurityGroupsV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityGroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all available Security Groups
     * Operation to get IDs, names, and descriptions for all available Security Groups.
     * @param {module:api/SecurityApi~securityGetSecurityGroupsV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityGroupResponse}
     */
    this.securityGetSecurityGroupsV1 = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SecurityGroupResponse;

      return this.apiClient.callApi(
        '/api/V1/getsecuritygroups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the securityGetSecurityGroupsV2 operation.
     * @callback module:api/SecurityApi~securityGetSecurityGroupsV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SecurityGroupV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all available Security Groups
     * Operation to get IDs, names, and descriptions for all available Security Groups.
     * @param {module:api/SecurityApi~securityGetSecurityGroupsV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SecurityGroupV2Response}
     */
    this.securityGetSecurityGroupsV2 = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SecurityGroupV2Response;

      return this.apiClient.callApi(
        '/api/V2/getsecuritygroups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the securityGetUsersInSecurityGroupV1 operation.
     * @callback module:api/SecurityApi~securityGetUsersInSecurityGroupV1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get users in a Security Group
     * Operation to get the users in a specified Security Group. Use \&quot;Get all available Security Groups\&quot; to get Security Group record IDs. 
     * @param {String} groupid Specify the Security Group ID.
     * @param {module:api/SecurityApi~securityGetUsersInSecurityGroupV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    this.securityGetUsersInSecurityGroupV1 = function(groupid, callback) {
      var postBody = null;

      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling securityGetUsersInSecurityGroupV1");
      }


      var pathParams = {
        'groupid': groupid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [User];

      return this.apiClient.callApi(
        '/api/V1/getusersinsecuritygroup/groupid/{groupid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the securityGetUsersInSecurityGroupV2 operation.
     * @callback module:api/SecurityApi~securityGetUsersInSecurityGroupV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UserReadV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get users in a Security Group
     * Operation to get the users in a specified Security Group. Use \&quot;Get all available Security Groups\&quot; to get Security Group record IDs. 
     * @param {String} groupid Specify the Security Group ID.
     * @param {module:api/SecurityApi~securityGetUsersInSecurityGroupV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserReadV2Response}
     */
    this.securityGetUsersInSecurityGroupV2 = function(groupid, callback) {
      var postBody = null;

      // verify the required parameter 'groupid' is set
      if (groupid === undefined || groupid === null) {
        throw new Error("Missing the required parameter 'groupid' when calling securityGetUsersInSecurityGroupV2");
      }


      var pathParams = {
        'groupid': groupid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = UserReadV2Response;

      return this.apiClient.callApi(
        '/api/V2/getusersinsecuritygroup/groupid/{groupid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
