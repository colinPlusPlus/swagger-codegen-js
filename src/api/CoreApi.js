/**
 * Cherwell Rest API
 * <a href=\"../../index.html\">Cherwell Rest API Documentation</a><br>Select version options from the header drop-down list (to the left of the Client Key box). Then, click Explore to view different versions of operations.
 *
 * OpenAPI spec version: 9.2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ManagerData', 'model/SaveGalleryImageRequest', 'model/SaveGalleryImageResponse', 'model/SaveStoredValueRequest', 'model/StoredValueResponse', 'model/ViewsResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ManagerData'), require('../model/SaveGalleryImageRequest'), require('../model/SaveGalleryImageResponse'), require('../model/SaveStoredValueRequest'), require('../model/StoredValueResponse'), require('../model/ViewsResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.CherwellRestApi) {
      root.CherwellRestApi = {};
    }
    root.CherwellRestApi.CoreApi = factory(root.CherwellRestApi.ApiClient, root.CherwellRestApi.ManagerData, root.CherwellRestApi.SaveGalleryImageRequest, root.CherwellRestApi.SaveGalleryImageResponse, root.CherwellRestApi.SaveStoredValueRequest, root.CherwellRestApi.StoredValueResponse, root.CherwellRestApi.ViewsResponse);
  }
}(this, function(ApiClient, ManagerData, SaveGalleryImageRequest, SaveGalleryImageResponse, SaveStoredValueRequest, StoredValueResponse, ViewsResponse) {
  'use strict';

  /**
   * Core service.
   * @module api/CoreApi
   * @version 9.2.0
   */

  /**
   * Constructs a new CoreApi. 
   * @alias module:api/CoreApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the coreDeleteGalleryImageByStandInKeyV1 operation.
     * @callback module:api/CoreApi~coreDeleteGalleryImageByStandInKeyV1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a gallery image
     * Endpoint to delete a gallery image.
     * @param {String} standinkey The StandIn key for the gallery image to delete.
     * @param {module:api/CoreApi~coreDeleteGalleryImageByStandInKeyV1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.coreDeleteGalleryImageByStandInKeyV1 = function(standinkey, callback) {
      var postBody = null;

      // verify the required parameter 'standinkey' is set
      if (standinkey === undefined || standinkey === null) {
        throw new Error("Missing the required parameter 'standinkey' when calling coreDeleteGalleryImageByStandInKeyV1");
      }


      var pathParams = {
        'standinkey': standinkey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/V1/deletegalleryimage/standinkey/{standinkey}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coreGetGalleryImageV1 operation.
     * @callback module:api/CoreApi~coreGetGalleryImageV1Callback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get built-in images
     * Operation that gets built-in images. If you are requesting an icon (.ico), you can specify width and height.
     * @param {String} name Image name and folder location in the Image Manager. Parameter must begin with \&quot;[PlugIn]Images;\&quot; and then a period-separated list of folders. Example: \&quot;[PlugIn]Images;Images.Common.Cherwell.ico\&quot;.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.width Specify the width (icons only).
     * @param {Number} opts.height Specify the height (icons only).
     * @param {module:api/CoreApi~coreGetGalleryImageV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.coreGetGalleryImageV1 = function(name, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling coreGetGalleryImageV1");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'width': opts['width'],
        'height': opts['height'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/V1/getgalleryimage/name/{name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coreGetGalleryImagesFolderV1 operation.
     * @callback module:api/CoreApi~coreGetGalleryImagesFolderV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get gallery images by scope, scopeowner, and folder
     * Get gallery images for the specified scope, scopeowner, and folder.
     * @param {String} scope The scope to get gallery images for.
     * @param {String} scopeowner the scopeowner to get gallery images for.
     * @param {String} folder The folder to get gallery images for.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.links Flag to include hyperlinks in results. Default is false.
     * @param {module:api/CoreApi~coreGetGalleryImagesFolderV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerData}
     */
    this.coreGetGalleryImagesFolderV1 = function(scope, scopeowner, folder, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling coreGetGalleryImagesFolderV1");
      }

      // verify the required parameter 'scopeowner' is set
      if (scopeowner === undefined || scopeowner === null) {
        throw new Error("Missing the required parameter 'scopeowner' when calling coreGetGalleryImagesFolderV1");
      }

      // verify the required parameter 'folder' is set
      if (folder === undefined || folder === null) {
        throw new Error("Missing the required parameter 'folder' when calling coreGetGalleryImagesFolderV1");
      }


      var pathParams = {
        'scope': scope,
        'scopeowner': scopeowner,
        'folder': folder
      };
      var queryParams = {
        'links': opts['links'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ManagerData;

      return this.apiClient.callApi(
        '/api/V1/getgalleryimages/scope/{scope}/scopeowner/{scopeowner}/folder/{folder}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coreGetGalleryImagesScopeOwnerV1 operation.
     * @callback module:api/CoreApi~coreGetGalleryImagesScopeOwnerV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get gallery images by scope and scopeowner
     * Get all gallery images for the specified scope and scope owner.
     * @param {String} scope The scope to get gallery images for.
     * @param {String} scopeowner The scopeowner to get gallery images for.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.links Flag to include hyperlinks in results. Default is false.
     * @param {module:api/CoreApi~coreGetGalleryImagesScopeOwnerV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerData}
     */
    this.coreGetGalleryImagesScopeOwnerV1 = function(scope, scopeowner, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling coreGetGalleryImagesScopeOwnerV1");
      }

      // verify the required parameter 'scopeowner' is set
      if (scopeowner === undefined || scopeowner === null) {
        throw new Error("Missing the required parameter 'scopeowner' when calling coreGetGalleryImagesScopeOwnerV1");
      }


      var pathParams = {
        'scope': scope,
        'scopeowner': scopeowner
      };
      var queryParams = {
        'links': opts['links'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ManagerData;

      return this.apiClient.callApi(
        '/api/V1/getgalleryimages/scope/{scope}/scopeowner/{scopeowner}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coreGetGalleryImagesScopeV1 operation.
     * @callback module:api/CoreApi~coreGetGalleryImagesScopeV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get gallery images by scope
     * Get all gallery images for the specified scope.
     * @param {String} scope The scope to get the images for.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.links Flag to include hyperlinks in results. Default is false.
     * @param {module:api/CoreApi~coreGetGalleryImagesScopeV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerData}
     */
    this.coreGetGalleryImagesScopeV1 = function(scope, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling coreGetGalleryImagesScopeV1");
      }


      var pathParams = {
        'scope': scope
      };
      var queryParams = {
        'links': opts['links'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ManagerData;

      return this.apiClient.callApi(
        '/api/V1/getgalleryimages/scope/{scope}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coreGetGalleryImagesV1 operation.
     * @callback module:api/CoreApi~coreGetGalleryImagesV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all gallery images
     * Get all the gallery images in the system.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.links Flag to include hyperlinks in results. Default is false.
     * @param {module:api/CoreApi~coreGetGalleryImagesV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerData}
     */
    this.coreGetGalleryImagesV1 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'links': opts['links'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ManagerData;

      return this.apiClient.callApi(
        '/api/V1/getgalleryimages', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coreGetStoredValueV1 operation.
     * @callback module:api/CoreApi~coreGetStoredValueV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/StoredValueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a  stored value
     * Get a stored value by its StandIn key.
     * @param {String} standInKey The StandIn key for the Stored Value you would like to retrieve.
     * @param {module:api/CoreApi~coreGetStoredValueV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoredValueResponse}
     */
    this.coreGetStoredValueV1 = function(standInKey, callback) {
      var postBody = null;

      // verify the required parameter 'standInKey' is set
      if (standInKey === undefined || standInKey === null) {
        throw new Error("Missing the required parameter 'standInKey' when calling coreGetStoredValueV1");
      }


      var pathParams = {
        'standInKey': standInKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = StoredValueResponse;

      return this.apiClient.callApi(
        '/api/V1/getstoredvalue/standinkey/{standInKey}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coreGetStoredValuesFolderV1 operation.
     * @callback module:api/CoreApi~coreGetStoredValuesFolderV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get stored values by folder
     * Get stored values for the specified folder.
     * @param {String} scope The scope for which to get stored values.
     * @param {String} scopeowner The scope owner for which to get stored values.
     * @param {String} folder The folder for which to get stored values.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.links Flag to include hyperlinks in results. Default is false.
     * @param {module:api/CoreApi~coreGetStoredValuesFolderV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerData}
     */
    this.coreGetStoredValuesFolderV1 = function(scope, scopeowner, folder, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling coreGetStoredValuesFolderV1");
      }

      // verify the required parameter 'scopeowner' is set
      if (scopeowner === undefined || scopeowner === null) {
        throw new Error("Missing the required parameter 'scopeowner' when calling coreGetStoredValuesFolderV1");
      }

      // verify the required parameter 'folder' is set
      if (folder === undefined || folder === null) {
        throw new Error("Missing the required parameter 'folder' when calling coreGetStoredValuesFolderV1");
      }


      var pathParams = {
        'scope': scope,
        'scopeowner': scopeowner,
        'folder': folder
      };
      var queryParams = {
        'links': opts['links'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ManagerData;

      return this.apiClient.callApi(
        '/api/V1/storedvalues/scope/{scope}/scopeowner/{scopeowner}/folder/{folder}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coreGetStoredValuesScopeOwnerV1 operation.
     * @callback module:api/CoreApi~coreGetStoredValuesScopeOwnerV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get stored values by scope owner
     * Get stored values for the specified scope and scope owner.
     * @param {String} scope The scope for which to get stored values.
     * @param {String} scopeowner The scope owner for which to get stored values.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.links Flag to include hyperlinks in results. Default is false.
     * @param {module:api/CoreApi~coreGetStoredValuesScopeOwnerV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerData}
     */
    this.coreGetStoredValuesScopeOwnerV1 = function(scope, scopeowner, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling coreGetStoredValuesScopeOwnerV1");
      }

      // verify the required parameter 'scopeowner' is set
      if (scopeowner === undefined || scopeowner === null) {
        throw new Error("Missing the required parameter 'scopeowner' when calling coreGetStoredValuesScopeOwnerV1");
      }


      var pathParams = {
        'scope': scope,
        'scopeowner': scopeowner
      };
      var queryParams = {
        'links': opts['links'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ManagerData;

      return this.apiClient.callApi(
        '/api/V1/storedvalues/scope/{scope}/scopeowner/{scopeowner}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coreGetStoredValuesScopeV1 operation.
     * @callback module:api/CoreApi~coreGetStoredValuesScopeV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get stored values by scope
     * Get all the stored values for the specified scope.
     * @param {String} scope The scope for which to get stored values.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.links Flag to include hyperlinks in results. Default is false.
     * @param {module:api/CoreApi~coreGetStoredValuesScopeV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerData}
     */
    this.coreGetStoredValuesScopeV1 = function(scope, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling coreGetStoredValuesScopeV1");
      }


      var pathParams = {
        'scope': scope
      };
      var queryParams = {
        'links': opts['links'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ManagerData;

      return this.apiClient.callApi(
        '/api/V1/storedvalues/scope/{scope}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coreGetStoredValuesV1 operation.
     * @callback module:api/CoreApi~coreGetStoredValuesV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the stored values in the system
     * Get all the stored values in the system.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.links Flag to include hyperlinks in results. Default is false.
     * @param {module:api/CoreApi~coreGetStoredValuesV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerData}
     */
    this.coreGetStoredValuesV1 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'links': opts['links'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ManagerData;

      return this.apiClient.callApi(
        '/api/V1/storedvalues', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coreGetViewsV1 operation.
     * @callback module:api/CoreApi~coreGetViewsV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ViewsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of the views
     * Operation to get a list of views that are configured in the system.
     * @param {module:api/CoreApi~coreGetViewsV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ViewsResponse}
     */
    this.coreGetViewsV1 = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ViewsResponse;

      return this.apiClient.callApi(
        '/api/V1/getviews', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coreSaveGalleryImageV1 operation.
     * @callback module:api/CoreApi~coreSaveGalleryImageV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SaveGalleryImageResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a gallery image
     * Endpoint to Create or update a gallery image. To create a new gallery image leave the StandIn key blank. To update a gallery image provide the StandIn key of the gallery image you want to update.&lt;/br&gt;There are three different ImageTypes allowed: Imported, Url, and File. To use the Imported image type, provide the filename in the Name property, with extension, and provide the image data in a Base64 encoded format in the Base64EncodedImageData property. The max file size is 512k.&lt;/br&gt;To use the Url image type,  provide the full network share path to the file in the Name property, ie: \&quot;\\\\\\\\\\\\\\\\networkshare\\\\\\somefolder\\\\\\somefile.jpg\&quot;. If the file is not accessible to all users it will not visible to all users.&lt;/br&gt;To use the File image type, provide the full path to the file in the Name property, ie: \&quot;C:\\\\\\somefolder\\\\\\somfile.jpg\&quot;. If the file is not accessible to all users it will not visible to all users.&lt;/br&gt;When creating or updating an image, Name and ImageType are always required, and if the image type is \&quot;Imported\&quot;, then the Base64EncodedImageData is also required. &lt;/br&gt;scope, scopeowner, and folder can all be updated independently.
     * @param {module:model/SaveGalleryImageRequest} request To create a new gallery image leave the StandIn key blank. To update a gallery image provide the StandIn key of the gallery image you want to update.&lt;/br&gt;There are three different ImageTypes allowed: Imported, Url, and File. To use the Imported image type, provide the filename in the Name property, with extension, and provide the image data in a Base64 encoded format in the Base64EncodedImageData property. The max file size is 512k.&lt;/br&gt;To use the Url image type,  provide the full network share path to the file in the Name property, ie: \&quot;\\\\\\\\\\\\\\\\networkshare\\\\\\somefolder\\\\\\somefile.jpg\&quot;. If the file is not accessible to all users it will not visible to all users.&lt;/br&gt;To use the File image type, provide the full path to the file in the Name property, ie: \&quot;C:\\\\\\somefolder\\\\\\somfile.jpg\&quot;. If the file is not accessible to all users it will not visible to all users.&lt;/br&gt;When creating or updating an image, Name and ImageType are always required, and if the image type is \&quot;Imported\&quot;, then the Base64EncodedImageData is also required. &lt;/br&gt;scope, scopeowner, and folder can all be updated independently.
     * @param {module:api/CoreApi~coreSaveGalleryImageV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SaveGalleryImageResponse}
     */
    this.coreSaveGalleryImageV1 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling coreSaveGalleryImageV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SaveGalleryImageResponse;

      return this.apiClient.callApi(
        '/api/V1/savegalleryimage', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coreSaveStoredValueV1 operation.
     * @callback module:api/CoreApi~coreSaveStoredValueV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/StoredValueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a stored value
     * Operation to create or update a stored value. To update, specify the StandIn key for the stored value to update. To create leave StandIn key blank, and provide a name, a scope, a type, and a value.
     * @param {module:model/SaveStoredValueRequest} request The stored value to create or update. To update include the StandIn key for the associated stored value. To create, name, scope, type, and value are required.
     * @param {module:api/CoreApi~coreSaveStoredValueV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoredValueResponse}
     */
    this.coreSaveStoredValueV1 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling coreSaveStoredValueV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = StoredValueResponse;

      return this.apiClient.callApi(
        '/api/V1/savestoredvalue', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the coreSetCultureV1 operation.
     * @callback module:api/CoreApi~coreSetCultureV1Callback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set the culture for the current user
     * Operation to update the current users culture by culture code. This returns a new access token that has the updated information in it.
     * @param {String} culturecode The culture code to set for the current user.
     * @param {module:api/CoreApi~coreSetCultureV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.coreSetCultureV1 = function(culturecode, callback) {
      var postBody = null;

      // verify the required parameter 'culturecode' is set
      if (culturecode === undefined || culturecode === null) {
        throw new Error("Missing the required parameter 'culturecode' when calling coreSetCultureV1");
      }


      var pathParams = {
        'culturecode': culturecode
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/V1/setculture/culturecode/{culturecode}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
