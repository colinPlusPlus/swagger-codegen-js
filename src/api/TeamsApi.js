/**
 * Cherwell Rest API
 * <a href=\"../../index.html\">Cherwell Rest API Documentation</a><br>Select version options from the header drop-down list (to the left of the Client Key box). Then, click Explore to view different versions of operations.
 *
 * OpenAPI spec version: 9.2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AddUserToTeamByBatchRequest', 'model/AddUserToTeamByBatchResponse', 'model/AddUserToTeamRequest', 'model/AddUserToTeamResponse', 'model/RemoveCustomerFromWorkgroupResponse', 'model/RemoveUserFromTeamResponse', 'model/SaveTeamMemberRequest', 'model/SaveTeamMemberResponse', 'model/SaveWorkgroupMemberRequest', 'model/SaveWorkgroupMemberResponse', 'model/TeamResponse', 'model/TeamSaveRequest', 'model/TeamSaveResponse', 'model/TeamsResponse', 'model/TeamsV2Response'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AddUserToTeamByBatchRequest'), require('../model/AddUserToTeamByBatchResponse'), require('../model/AddUserToTeamRequest'), require('../model/AddUserToTeamResponse'), require('../model/RemoveCustomerFromWorkgroupResponse'), require('../model/RemoveUserFromTeamResponse'), require('../model/SaveTeamMemberRequest'), require('../model/SaveTeamMemberResponse'), require('../model/SaveWorkgroupMemberRequest'), require('../model/SaveWorkgroupMemberResponse'), require('../model/TeamResponse'), require('../model/TeamSaveRequest'), require('../model/TeamSaveResponse'), require('../model/TeamsResponse'), require('../model/TeamsV2Response'));
  } else {
    // Browser globals (root is window)
    if (!root.CherwellRestApi) {
      root.CherwellRestApi = {};
    }
    root.CherwellRestApi.TeamsApi = factory(root.CherwellRestApi.ApiClient, root.CherwellRestApi.AddUserToTeamByBatchRequest, root.CherwellRestApi.AddUserToTeamByBatchResponse, root.CherwellRestApi.AddUserToTeamRequest, root.CherwellRestApi.AddUserToTeamResponse, root.CherwellRestApi.RemoveCustomerFromWorkgroupResponse, root.CherwellRestApi.RemoveUserFromTeamResponse, root.CherwellRestApi.SaveTeamMemberRequest, root.CherwellRestApi.SaveTeamMemberResponse, root.CherwellRestApi.SaveWorkgroupMemberRequest, root.CherwellRestApi.SaveWorkgroupMemberResponse, root.CherwellRestApi.TeamResponse, root.CherwellRestApi.TeamSaveRequest, root.CherwellRestApi.TeamSaveResponse, root.CherwellRestApi.TeamsResponse, root.CherwellRestApi.TeamsV2Response);
  }
}(this, function(ApiClient, AddUserToTeamByBatchRequest, AddUserToTeamByBatchResponse, AddUserToTeamRequest, AddUserToTeamResponse, RemoveCustomerFromWorkgroupResponse, RemoveUserFromTeamResponse, SaveTeamMemberRequest, SaveTeamMemberResponse, SaveWorkgroupMemberRequest, SaveWorkgroupMemberResponse, TeamResponse, TeamSaveRequest, TeamSaveResponse, TeamsResponse, TeamsV2Response) {
  'use strict';

  /**
   * Teams service.
   * @module api/TeamsApi
   * @version 9.2.0
   */

  /**
   * Constructs a new TeamsApi. 
   * @alias module:api/TeamsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the teamsAddUserToTeamByBatchV1 operation.
     * @callback module:api/TeamsApi~teamsAddUserToTeamByBatchV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AddUserToTeamByBatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add users to a team by batch
     * Operation to add users to a Team by batch. To get internal IDs for users, use “Get User Information in a Batch.” To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
     * @param {module:model/AddUserToTeamByBatchRequest} request Request object to specify a list of add user to team request objects.
     * @param {module:api/TeamsApi~teamsAddUserToTeamByBatchV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddUserToTeamByBatchResponse}
     */
    this.teamsAddUserToTeamByBatchV1 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling teamsAddUserToTeamByBatchV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = AddUserToTeamByBatchResponse;

      return this.apiClient.callApi(
        '/api/V1/addusertoteambybatch', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsAddUserToTeamV1 operation.
     * @callback module:api/TeamsApi~teamsAddUserToTeamV1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a user to a team
     * Operation to add a user to a Team. To get the user&#39;s internal ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
     * @param {module:model/AddUserToTeamRequest} dataRequest Request object to specify user and team values.
     * @param {module:api/TeamsApi~teamsAddUserToTeamV1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.teamsAddUserToTeamV1 = function(dataRequest, callback) {
      var postBody = dataRequest;

      // verify the required parameter 'dataRequest' is set
      if (dataRequest === undefined || dataRequest === null) {
        throw new Error("Missing the required parameter 'dataRequest' when calling teamsAddUserToTeamV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/V1/addusertoteam', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsAddUserToTeamV2 operation.
     * @callback module:api/TeamsApi~teamsAddUserToTeamV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AddUserToTeamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a user to a team
     * Operation to add a user to a Team. To get the user&#39;s internal ID, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
     * @param {module:model/AddUserToTeamRequest} dataRequest Request object to specify user and team values.
     * @param {module:api/TeamsApi~teamsAddUserToTeamV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddUserToTeamResponse}
     */
    this.teamsAddUserToTeamV2 = function(dataRequest, callback) {
      var postBody = dataRequest;

      // verify the required parameter 'dataRequest' is set
      if (dataRequest === undefined || dataRequest === null) {
        throw new Error("Missing the required parameter 'dataRequest' when calling teamsAddUserToTeamV2");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = AddUserToTeamResponse;

      return this.apiClient.callApi(
        '/api/V2/addusertoteam', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsDeleteTeamV1 operation.
     * @callback module:api/TeamsApi~teamsDeleteTeamV1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Team
     * Operation to delete a Team by Team ID.
     * @param {String} teamid Specify the Team ID.
     * @param {module:api/TeamsApi~teamsDeleteTeamV1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.teamsDeleteTeamV1 = function(teamid, callback) {
      var postBody = null;

      // verify the required parameter 'teamid' is set
      if (teamid === undefined || teamid === null) {
        throw new Error("Missing the required parameter 'teamid' when calling teamsDeleteTeamV1");
      }


      var pathParams = {
        'teamid': teamid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/V1/deleteteam/{teamid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGetTeamV1 operation.
     * @callback module:api/TeamsApi~teamsGetTeamV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a team by its TeamId
     * Operation to get Team Info for a  single Team using its Team ID. To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot; Note that TeamType has two possible values, where TeamType &#x3D; 0 for User (CSM Users), or TeamType &#x3D; 1 for Workgroup (CSM Customers).
     * @param {String} teamid The Team ID of the Team to get.
     * @param {module:api/TeamsApi~teamsGetTeamV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamResponse}
     */
    this.teamsGetTeamV1 = function(teamid, callback) {
      var postBody = null;

      // verify the required parameter 'teamid' is set
      if (teamid === undefined || teamid === null) {
        throw new Error("Missing the required parameter 'teamid' when calling teamsGetTeamV1");
      }


      var pathParams = {
        'teamid': teamid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = TeamResponse;

      return this.apiClient.callApi(
        '/api/V1/getteam/{teamid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGetTeamsV1 operation.
     * @callback module:api/TeamsApi~teamsGetTeamsV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all available Teams
     * Operation to get IDs and names for all available Teams.
     * @param {module:api/TeamsApi~teamsGetTeamsV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamsResponse}
     */
    this.teamsGetTeamsV1 = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = TeamsResponse;

      return this.apiClient.callApi(
        '/api/V1/getteams', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGetTeamsV2 operation.
     * @callback module:api/TeamsApi~teamsGetTeamsV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamsV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all available Teams
     * Operation to get IDs and names for all available Teams.
     * @param {module:api/TeamsApi~teamsGetTeamsV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamsV2Response}
     */
    this.teamsGetTeamsV2 = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = TeamsV2Response;

      return this.apiClient.callApi(
        '/api/V2/getteams', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGetUsersTeamsV1 operation.
     * @callback module:api/TeamsApi~teamsGetUsersTeamsV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Team assignments for a user
     * Operation to get Team assignments for a user. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
     * @param {String} userRecordId Specify the user record ID.
     * @param {module:api/TeamsApi~teamsGetUsersTeamsV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamsResponse}
     */
    this.teamsGetUsersTeamsV1 = function(userRecordId, callback) {
      var postBody = null;

      // verify the required parameter 'userRecordId' is set
      if (userRecordId === undefined || userRecordId === null) {
        throw new Error("Missing the required parameter 'userRecordId' when calling teamsGetUsersTeamsV1");
      }


      var pathParams = {
        'userRecordId': userRecordId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = TeamsResponse;

      return this.apiClient.callApi(
        '/api/V1/getusersteams/userrecordid/{userRecordId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGetUsersTeamsV2 operation.
     * @callback module:api/TeamsApi~teamsGetUsersTeamsV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamsV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Team assignments for a user
     * Operation to get Team assignments for a user. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
     * @param {String} userRecordId Specify the user record ID.
     * @param {module:api/TeamsApi~teamsGetUsersTeamsV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamsV2Response}
     */
    this.teamsGetUsersTeamsV2 = function(userRecordId, callback) {
      var postBody = null;

      // verify the required parameter 'userRecordId' is set
      if (userRecordId === undefined || userRecordId === null) {
        throw new Error("Missing the required parameter 'userRecordId' when calling teamsGetUsersTeamsV2");
      }


      var pathParams = {
        'userRecordId': userRecordId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = TeamsV2Response;

      return this.apiClient.callApi(
        '/api/V2/getusersteams/userrecordid/{userRecordId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGetWorkgroupsV1 operation.
     * @callback module:api/TeamsApi~teamsGetWorkgroupsV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all available Workgroups
     * Operation to get IDs and names for all available Workgroups.
     * @param {module:api/TeamsApi~teamsGetWorkgroupsV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamsResponse}
     */
    this.teamsGetWorkgroupsV1 = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = TeamsResponse;

      return this.apiClient.callApi(
        '/api/V1/getworkgroups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsGetWorkgroupsV2 operation.
     * @callback module:api/TeamsApi~teamsGetWorkgroupsV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamsV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all available Workgroups
     * Operation to get IDs and names for all available Workgroups.
     * @param {module:api/TeamsApi~teamsGetWorkgroupsV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamsV2Response}
     */
    this.teamsGetWorkgroupsV2 = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = TeamsV2Response;

      return this.apiClient.callApi(
        '/api/V2/getworkgroups', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsRemoveCustomerFromWorkgroupV1 operation.
     * @callback module:api/TeamsApi~teamsRemoveCustomerFromWorkgroupV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveCustomerFromWorkgroupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a customer from a Workgroup
     * Operation to remove a Customer from a Workgroup.  To remove, specify the Workgroup ID and the Customer Record ID.
     * @param {String} workgroupid Specify the Workgroup ID.
     * @param {String} customerrecordid Specify the Customer record ID.
     * @param {module:api/TeamsApi~teamsRemoveCustomerFromWorkgroupV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveCustomerFromWorkgroupResponse}
     */
    this.teamsRemoveCustomerFromWorkgroupV1 = function(workgroupid, customerrecordid, callback) {
      var postBody = null;

      // verify the required parameter 'workgroupid' is set
      if (workgroupid === undefined || workgroupid === null) {
        throw new Error("Missing the required parameter 'workgroupid' when calling teamsRemoveCustomerFromWorkgroupV1");
      }

      // verify the required parameter 'customerrecordid' is set
      if (customerrecordid === undefined || customerrecordid === null) {
        throw new Error("Missing the required parameter 'customerrecordid' when calling teamsRemoveCustomerFromWorkgroupV1");
      }


      var pathParams = {
        'workgroupid': workgroupid,
        'customerrecordid': customerrecordid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RemoveCustomerFromWorkgroupResponse;

      return this.apiClient.callApi(
        '/api/V1/removecustomerfromworkgroup/workgroupid/{workgroupid}/customerrecordid/{customerrecordid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsRemoveUserFromTeamV1 operation.
     * @callback module:api/TeamsApi~teamsRemoveUserFromTeamV1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Operation to remove a User from a Team.
     * Operation to remove a User from a Team. To get the User&#39;s record ID, use \&quot;Get a User by login ID\&quot; or \&quot;Get a User by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
     * @param {String} teamId Specify the internal ID of the Team.
     * @param {String} userrecordid Specify the record ID of the User to remove.
     * @param {module:api/TeamsApi~teamsRemoveUserFromTeamV1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.teamsRemoveUserFromTeamV1 = function(teamId, userrecordid, callback) {
      var postBody = null;

      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsRemoveUserFromTeamV1");
      }

      // verify the required parameter 'userrecordid' is set
      if (userrecordid === undefined || userrecordid === null) {
        throw new Error("Missing the required parameter 'userrecordid' when calling teamsRemoveUserFromTeamV1");
      }


      var pathParams = {
        'teamId': teamId,
        'userrecordid': userrecordid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/V1/removeuserfromteam/teamid/{teamId}/userrecordid/{userrecordid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsRemoveUserFromTeamV2 operation.
     * @callback module:api/TeamsApi~teamsRemoveUserFromTeamV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RemoveUserFromTeamResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Operation to remove a User from a Team.
     * Operation to remove a User from a Team. To get the User&#39;s record ID, use \&quot;Get a User by login ID\&quot; or \&quot;Get a User by public ID.\&quot; To get a Team&#39;s internal ID, use \&quot;Get all available Teams.\&quot;
     * @param {String} teamId Specify the internal ID of the Team.
     * @param {String} userrecordid Specify the record ID of the User to remove.
     * @param {module:api/TeamsApi~teamsRemoveUserFromTeamV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RemoveUserFromTeamResponse}
     */
    this.teamsRemoveUserFromTeamV2 = function(teamId, userrecordid, callback) {
      var postBody = null;

      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamsRemoveUserFromTeamV2");
      }

      // verify the required parameter 'userrecordid' is set
      if (userrecordid === undefined || userrecordid === null) {
        throw new Error("Missing the required parameter 'userrecordid' when calling teamsRemoveUserFromTeamV2");
      }


      var pathParams = {
        'teamId': teamId,
        'userrecordid': userrecordid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RemoveUserFromTeamResponse;

      return this.apiClient.callApi(
        '/api/V2/removeuserfromteam/teamid/{teamId}/userrecordid/{userrecordid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsSaveTeamMemberV1 operation.
     * @callback module:api/TeamsApi~teamsSaveTeamMemberV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SaveTeamMemberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or Update a team member
     * Operation to add or update a Team Member. To add or update, specify User ID, Team ID, and if Team Manager.   Optionally, set the Team as the User&#39;s default Team.
     * @param {module:model/SaveTeamMemberRequest} request The request object to add or update a Team Member. UserRecId specifies the User to add or update. TeamId specifies the Team to update. IsTeamManager specifies whether the User is a Team Manager, and SetAsDefaultTeam specifies whether to set this Team as the User&#39;s default team. UserRecId, TeamId, and IsTeamManager are required.
     * @param {module:api/TeamsApi~teamsSaveTeamMemberV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SaveTeamMemberResponse}
     */
    this.teamsSaveTeamMemberV1 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling teamsSaveTeamMemberV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SaveTeamMemberResponse;

      return this.apiClient.callApi(
        '/api/V1/saveteammember', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsSaveTeamV1 operation.
     * @callback module:api/TeamsApi~teamsSaveTeamV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamSaveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a team
     * Operation to create or update a Team or Workgroup. 
     * @param {module:model/TeamSaveRequest} request Request object to create Teams or Workgroups. To create a Team, use teamType and teamName. To update a team, use teamID. Team type values must be User or CustomerWorkgroup. The teamType cannot be changed for existing Teams or Workgroups.
     * @param {module:api/TeamsApi~teamsSaveTeamV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamSaveResponse}
     */
    this.teamsSaveTeamV1 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling teamsSaveTeamV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = TeamSaveResponse;

      return this.apiClient.callApi(
        '/api/V1/saveteam', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the teamsSaveWorkgroupMemberV1 operation.
     * @callback module:api/TeamsApi~teamsSaveWorkgroupMemberV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SaveWorkgroupMemberResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Save the membership status of a Workgroup member.
     * Operation to add or update a Workgroup Member.  To add or update, specify Customer Record ID, Workgroup ID, and if Workgroup Manager.
     * @param {module:model/SaveWorkgroupMemberRequest} request The request object to add or update a Workgroup Member. CustomerRecordId specifies the Customer to add or update. WorkgroupId specifies the Workgroup to update. CustomerIsWorkgroupManager specifies whether the Customer is a Workgroup Manager.
     * @param {module:api/TeamsApi~teamsSaveWorkgroupMemberV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SaveWorkgroupMemberResponse}
     */
    this.teamsSaveWorkgroupMemberV1 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling teamsSaveWorkgroupMemberV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SaveWorkgroupMemberResponse;

      return this.apiClient.callApi(
        '/api/V1/saveworkgroupmember', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
