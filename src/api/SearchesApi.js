/**
 * Cherwell Rest API
 * <a href=\"../../index.html\">Cherwell Rest API Documentation</a><br>Select version options from the header drop-down list (to the left of the Client Key box). Then, click Explore to view different versions of operations.
 *
 * OpenAPI spec version: 9.2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ExportSearchResultsRequest', 'model/ManagerData', 'model/QuickSearchConfigurationRequest', 'model/QuickSearchConfigurationResponse', 'model/QuickSearchRequest', 'model/QuickSearchResponse', 'model/QuickSearchSpecificRequest', 'model/SearchItemResponse', 'model/SearchResultsRequest', 'model/SearchResultsResponse', 'model/SearchResultsTableResponse', 'model/SimpleResultsList'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ExportSearchResultsRequest'), require('../model/ManagerData'), require('../model/QuickSearchConfigurationRequest'), require('../model/QuickSearchConfigurationResponse'), require('../model/QuickSearchRequest'), require('../model/QuickSearchResponse'), require('../model/QuickSearchSpecificRequest'), require('../model/SearchItemResponse'), require('../model/SearchResultsRequest'), require('../model/SearchResultsResponse'), require('../model/SearchResultsTableResponse'), require('../model/SimpleResultsList'));
  } else {
    // Browser globals (root is window)
    if (!root.CherwellRestApi) {
      root.CherwellRestApi = {};
    }
    root.CherwellRestApi.SearchesApi = factory(root.CherwellRestApi.ApiClient, root.CherwellRestApi.ExportSearchResultsRequest, root.CherwellRestApi.ManagerData, root.CherwellRestApi.QuickSearchConfigurationRequest, root.CherwellRestApi.QuickSearchConfigurationResponse, root.CherwellRestApi.QuickSearchRequest, root.CherwellRestApi.QuickSearchResponse, root.CherwellRestApi.QuickSearchSpecificRequest, root.CherwellRestApi.SearchItemResponse, root.CherwellRestApi.SearchResultsRequest, root.CherwellRestApi.SearchResultsResponse, root.CherwellRestApi.SearchResultsTableResponse, root.CherwellRestApi.SimpleResultsList);
  }
}(this, function(ApiClient, ExportSearchResultsRequest, ManagerData, QuickSearchConfigurationRequest, QuickSearchConfigurationResponse, QuickSearchRequest, QuickSearchResponse, QuickSearchSpecificRequest, SearchItemResponse, SearchResultsRequest, SearchResultsResponse, SearchResultsTableResponse, SimpleResultsList) {
  'use strict';

  /**
   * Searches service.
   * @module api/SearchesApi
   * @version 9.2.0
   */

  /**
   * Constructs a new SearchesApi. 
   * @alias module:api/SearchesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the searchesGetQuickSearchConfigurationForBusObsV1 operation.
     * @callback module:api/SearchesApi~searchesGetQuickSearchConfigurationForBusObsV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/QuickSearchConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Quick Search from a list of Business Object IDs
     * Operation to build a Quick Search configuration that you can use to execute a Quick Search for multiple Business Objects. The configuration  includes supplied Business Object IDs and specific search items with the following options. Use the Option Key to determine if you can change the options. &lt;/br&gt;&lt;/br&gt;&lt;/br&gt;ChangedOption&lt;/br&gt;&lt;/br&gt;NonFinalStateOption&lt;/br&gt;&lt;/br&gt;SearchAnyWordsOption&lt;/br&gt;&lt;/br&gt;SearchAttachmentsOption&lt;/br&gt;&lt;/br&gt;SearchRelatedOption&lt;/br&gt;&lt;/br&gt;SortByOption&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;Option Key:&lt;/br&gt;&lt;/br&gt;0 &#x3D; None (Not selected and cannot select.)&lt;/br&gt;&lt;/br&gt;1 &#x3D; Use (Selected and cannot clear.)&lt;/br&gt;&lt;/br&gt;2 &#x3D; Display (Not selected and can select.)&lt;/br&gt;&lt;/br&gt;3 &#x3D; UseAndDisplay (Selected and can clear.)&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;SearchTargetType:&lt;/br&gt;&lt;/br&gt;0 &#x3D; BusOb (Business Object)&lt;/br&gt;&lt;/br&gt;1 &#x3D; DocRepository (Document Repository)
     * @param {module:model/QuickSearchConfigurationRequest} dataRequest Request containing the Business Object IDs list.
     * @param {module:api/SearchesApi~searchesGetQuickSearchConfigurationForBusObsV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuickSearchConfigurationResponse}
     */
    this.searchesGetQuickSearchConfigurationForBusObsV1 = function(dataRequest, callback) {
      var postBody = dataRequest;

      // verify the required parameter 'dataRequest' is set
      if (dataRequest === undefined || dataRequest === null) {
        throw new Error("Missing the required parameter 'dataRequest' when calling searchesGetQuickSearchConfigurationForBusObsV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = QuickSearchConfigurationResponse;

      return this.apiClient.callApi(
        '/api/V1/getquicksearchconfigurationforbusobs', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchesGetQuickSearchConfigurationForBusObsWithViewRightsV1 operation.
     * @callback module:api/SearchesApi~searchesGetQuickSearchConfigurationForBusObsWithViewRightsV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/QuickSearchConfigurationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Quick Search by Business Objects with view rights
     * Operation to get a Quick Search configuration that you can use to execute a Quick Search based the current user&#39;s Business Object view rights. The configuration  includes supplied Business Object IDs and specific search items with the following options. Use the Option Key to determine if you can change the options.&lt;/br&gt;&lt;/br&gt;ChangedOption&lt;/br&gt;&lt;/br&gt;NonFinalStateOption&lt;/br&gt;&lt;/br&gt;SearchAnyWordsOption&lt;/br&gt;&lt;/br&gt;SearchAttachmentsOption&lt;/br&gt;&lt;/br&gt;SearchRelatedOption&lt;/br&gt;&lt;/br&gt;SortByOption&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;Option Key:&lt;/br&gt;&lt;/br&gt;0 &#x3D; None (Not selected and cannot select.)&lt;/br&gt;&lt;/br&gt;1 &#x3D; Use (Selected and cannot clear.)&lt;/br&gt;&lt;/br&gt;2 &#x3D; Display (Not selected and can select.)&lt;/br&gt;&lt;/br&gt;3 &#x3D; UseAndDisplay (Selected and can clear.)&lt;/br&gt;&lt;/br&gt;&lt;/br&gt;SearchTargetType:&lt;/br&gt;&lt;/br&gt;0 &#x3D; BusOb (Business Object)&lt;/br&gt;&lt;/br&gt;1 &#x3D; DocRepository (Document Repository)
     * @param {module:api/SearchesApi~searchesGetQuickSearchConfigurationForBusObsWithViewRightsV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuickSearchConfigurationResponse}
     */
    this.searchesGetQuickSearchConfigurationForBusObsWithViewRightsV1 = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = QuickSearchConfigurationResponse;

      return this.apiClient.callApi(
        '/api/V1/getquicksearchconfigurationforbusobswithviewrights', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchesGetQuickSearchResultsV1 operation.
     * @callback module:api/SearchesApi~searchesGetQuickSearchResultsV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleResultsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute a Quick Search from a list of Business Object IDs and search text
     * Operation to execute a Quick Search using a list of Business Object IDs and search text.
     * @param {module:model/QuickSearchRequest} dataRequest Request object listing Business Object IDs and search text. Leave out the entire busObIds parameter and all configured quick search Business Objects will be searched.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeLinks Flag to include hyperlinks in results. Default is false. 
     * @param {module:api/SearchesApi~searchesGetQuickSearchResultsV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleResultsList}
     */
    this.searchesGetQuickSearchResultsV1 = function(dataRequest, opts, callback) {
      opts = opts || {};
      var postBody = dataRequest;

      // verify the required parameter 'dataRequest' is set
      if (dataRequest === undefined || dataRequest === null) {
        throw new Error("Missing the required parameter 'dataRequest' when calling searchesGetQuickSearchResultsV1");
      }


      var pathParams = {
      };
      var queryParams = {
        'includeLinks': opts['includeLinks'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SimpleResultsList;

      return this.apiClient.callApi(
        '/api/V1/getquicksearchresults', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchesGetQuickSearchSpecificResultsV1 operation.
     * @callback module:api/SearchesApi~searchesGetQuickSearchSpecificResultsV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResultsTableResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute a Quick Search on a specific Business Object
     * Operation to execute a Quick Search for a specific Business Object ID. Use \&quot;Get a Quick Search from a list of Business Object IDs\&quot; to find values for specific search item options, such as NonFinalStateOption.
     * @param {module:model/QuickSearchSpecificRequest} dataRequest Request object containing the parameters for specific Business Object Quick Search execution.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeSchema Flag to include the schema for the results.
     * @param {Boolean} opts.includeLocationFields Flag to include location fields in the results.
     * @param {Boolean} opts.includeLinks Flag to include hyperlinks in results. Default is false. 
     * @param {module:api/SearchesApi~searchesGetQuickSearchSpecificResultsV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResultsTableResponse}
     */
    this.searchesGetQuickSearchSpecificResultsV1 = function(dataRequest, opts, callback) {
      opts = opts || {};
      var postBody = dataRequest;

      // verify the required parameter 'dataRequest' is set
      if (dataRequest === undefined || dataRequest === null) {
        throw new Error("Missing the required parameter 'dataRequest' when calling searchesGetQuickSearchSpecificResultsV1");
      }


      var pathParams = {
      };
      var queryParams = {
        'includeSchema': opts['includeSchema'],
        'includeLocationFields': opts['includeLocationFields'],
        'includeLinks': opts['includeLinks'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SearchResultsTableResponse;

      return this.apiClient.callApi(
        '/api/V1/getquicksearchspecificresults', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchesGetQuickSearchSpecificResultsV2 operation.
     * @callback module:api/SearchesApi~searchesGetQuickSearchSpecificResultsV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/QuickSearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Execute a Quick Search on a specific Business Object
     * Operation to execute a Quick Search for a specific Business Object ID. Use \&quot;Get a Quick Search from a list of Business Object IDs\&quot; to find values for specific search item options, such as NonFinalStateOption.
     * @param {module:model/QuickSearchSpecificRequest} dataRequest Request object containing the parameters for specific Business Object Quick Search execution.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includeSchema Flag to include the schema for the results.
     * @param {Boolean} opts.includeLocationFields Flag to include location fields in the results.
     * @param {Boolean} opts.includeLinks Flag to include hyperlinks in results. Default is false. 
     * @param {module:api/SearchesApi~searchesGetQuickSearchSpecificResultsV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuickSearchResponse}
     */
    this.searchesGetQuickSearchSpecificResultsV2 = function(dataRequest, opts, callback) {
      opts = opts || {};
      var postBody = dataRequest;

      // verify the required parameter 'dataRequest' is set
      if (dataRequest === undefined || dataRequest === null) {
        throw new Error("Missing the required parameter 'dataRequest' when calling searchesGetQuickSearchSpecificResultsV2");
      }


      var pathParams = {
      };
      var queryParams = {
        'includeSchema': opts['includeSchema'],
        'includeLocationFields': opts['includeLocationFields'],
        'includeLinks': opts['includeLinks'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = QuickSearchResponse;

      return this.apiClient.callApi(
        '/api/V2/getquicksearchspecificresults', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchesGetSearchItemsByAssociationScopeScopeOwnerFolderV1 operation.
     * @callback module:api/SearchesApi~searchesGetSearchItemsByAssociationScopeScopeOwnerFolderV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all saved searches by Folder ID
     * Operation that returns a tree of saved queries, including scope, search name, IDs, and location within the tree.
     * @param {String} association Use to filter results by Business Object association ID.
     * @param {String} scope Use to filter results by scope name or ID.
     * @param {String} scopeowner Use to filter results by scope owner ID.
     * @param {String} folder Use to filter results by Search Group folder ID.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.links Flag to include hyperlinks in results. Default is false. 
     * @param {module:api/SearchesApi~searchesGetSearchItemsByAssociationScopeScopeOwnerFolderV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchItemResponse}
     */
    this.searchesGetSearchItemsByAssociationScopeScopeOwnerFolderV1 = function(association, scope, scopeowner, folder, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'association' is set
      if (association === undefined || association === null) {
        throw new Error("Missing the required parameter 'association' when calling searchesGetSearchItemsByAssociationScopeScopeOwnerFolderV1");
      }

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling searchesGetSearchItemsByAssociationScopeScopeOwnerFolderV1");
      }

      // verify the required parameter 'scopeowner' is set
      if (scopeowner === undefined || scopeowner === null) {
        throw new Error("Missing the required parameter 'scopeowner' when calling searchesGetSearchItemsByAssociationScopeScopeOwnerFolderV1");
      }

      // verify the required parameter 'folder' is set
      if (folder === undefined || folder === null) {
        throw new Error("Missing the required parameter 'folder' when calling searchesGetSearchItemsByAssociationScopeScopeOwnerFolderV1");
      }


      var pathParams = {
        'association': association,
        'scope': scope,
        'scopeowner': scopeowner,
        'folder': folder
      };
      var queryParams = {
        'links': opts['links'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SearchItemResponse;

      return this.apiClient.callApi(
        '/api/V1/getsearchitems/association/{association}/scope/{scope}/scopeowner/{scopeowner}/folder/{folder}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchesGetSearchItemsByAssociationScopeScopeOwnerFolderV2 operation.
     * @callback module:api/SearchesApi~searchesGetSearchItemsByAssociationScopeScopeOwnerFolderV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all saved searches by Folder ID
     * Operation that returns a tree of saved queries, including scope, search name, IDs, and location within the tree.
     * @param {String} association Use to filter results by Business Object association ID.
     * @param {String} scope Use to filter results by scope name or ID.
     * @param {String} scopeowner Use to filter results by scope owner ID.
     * @param {String} folder Use to filter results by Search Group folder ID.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.links Flag to include hyperlinks in results. Default is false. 
     * @param {module:api/SearchesApi~searchesGetSearchItemsByAssociationScopeScopeOwnerFolderV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerData}
     */
    this.searchesGetSearchItemsByAssociationScopeScopeOwnerFolderV2 = function(association, scope, scopeowner, folder, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'association' is set
      if (association === undefined || association === null) {
        throw new Error("Missing the required parameter 'association' when calling searchesGetSearchItemsByAssociationScopeScopeOwnerFolderV2");
      }

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling searchesGetSearchItemsByAssociationScopeScopeOwnerFolderV2");
      }

      // verify the required parameter 'scopeowner' is set
      if (scopeowner === undefined || scopeowner === null) {
        throw new Error("Missing the required parameter 'scopeowner' when calling searchesGetSearchItemsByAssociationScopeScopeOwnerFolderV2");
      }

      // verify the required parameter 'folder' is set
      if (folder === undefined || folder === null) {
        throw new Error("Missing the required parameter 'folder' when calling searchesGetSearchItemsByAssociationScopeScopeOwnerFolderV2");
      }


      var pathParams = {
        'association': association,
        'scope': scope,
        'scopeowner': scopeowner,
        'folder': folder
      };
      var queryParams = {
        'links': opts['links'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ManagerData;

      return this.apiClient.callApi(
        '/api/V2/getsearchitems/association/{association}/scope/{scope}/scopeowner/{scopeowner}/folder/{folder}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchesGetSearchItemsByAssociationScopeScopeOwnerV1 operation.
     * @callback module:api/SearchesApi~searchesGetSearchItemsByAssociationScopeScopeOwnerV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all saved searches by scope owner (sub scope)
     * Operation that returns a tree of saved queries, including scope, search name, IDs, and location within the tree.
     * @param {String} association Use to filter results by Business Object association ID.
     * @param {String} scope Use to filter results by scope name or ID.
     * @param {String} scopeowner Use to filter results by scope owner ID.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.links Flag to include hyperlinks in results. Default is false. 
     * @param {module:api/SearchesApi~searchesGetSearchItemsByAssociationScopeScopeOwnerV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchItemResponse}
     */
    this.searchesGetSearchItemsByAssociationScopeScopeOwnerV1 = function(association, scope, scopeowner, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'association' is set
      if (association === undefined || association === null) {
        throw new Error("Missing the required parameter 'association' when calling searchesGetSearchItemsByAssociationScopeScopeOwnerV1");
      }

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling searchesGetSearchItemsByAssociationScopeScopeOwnerV1");
      }

      // verify the required parameter 'scopeowner' is set
      if (scopeowner === undefined || scopeowner === null) {
        throw new Error("Missing the required parameter 'scopeowner' when calling searchesGetSearchItemsByAssociationScopeScopeOwnerV1");
      }


      var pathParams = {
        'association': association,
        'scope': scope,
        'scopeowner': scopeowner
      };
      var queryParams = {
        'links': opts['links'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SearchItemResponse;

      return this.apiClient.callApi(
        '/api/V1/getsearchitems/association/{association}/scope/{scope}/scopeowner/{scopeowner}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchesGetSearchItemsByAssociationScopeScopeOwnerV2 operation.
     * @callback module:api/SearchesApi~searchesGetSearchItemsByAssociationScopeScopeOwnerV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all saved searches by scope owner (sub scope)
     * Operation that returns a tree of saved queries, including scope, search name, IDs, and location within the tree.
     * @param {String} association Use to filter results by Business Object association ID.
     * @param {String} scope Use to filter results by scope name or ID.
     * @param {String} scopeowner Use to filter results by scope owner ID.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.links Flag to include hyperlinks in results. Default is false. 
     * @param {module:api/SearchesApi~searchesGetSearchItemsByAssociationScopeScopeOwnerV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerData}
     */
    this.searchesGetSearchItemsByAssociationScopeScopeOwnerV2 = function(association, scope, scopeowner, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'association' is set
      if (association === undefined || association === null) {
        throw new Error("Missing the required parameter 'association' when calling searchesGetSearchItemsByAssociationScopeScopeOwnerV2");
      }

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling searchesGetSearchItemsByAssociationScopeScopeOwnerV2");
      }

      // verify the required parameter 'scopeowner' is set
      if (scopeowner === undefined || scopeowner === null) {
        throw new Error("Missing the required parameter 'scopeowner' when calling searchesGetSearchItemsByAssociationScopeScopeOwnerV2");
      }


      var pathParams = {
        'association': association,
        'scope': scope,
        'scopeowner': scopeowner
      };
      var queryParams = {
        'links': opts['links'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ManagerData;

      return this.apiClient.callApi(
        '/api/V2/getsearchitems/association/{association}/scope/{scope}/scopeowner/{scopeowner}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchesGetSearchItemsByAssociationScopeV1 operation.
     * @callback module:api/SearchesApi~searchesGetSearchItemsByAssociationScopeV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all saved searches by scope
     * Operation that returns a tree of saved queries, including scope, search name, IDs, and location within the tree.
     * @param {String} association Use to filter results by Business Object association ID.
     * @param {String} scope Use to filter results by scope name or ID.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.links Flag to include hyperlinks in results. Default is false. 
     * @param {module:api/SearchesApi~searchesGetSearchItemsByAssociationScopeV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchItemResponse}
     */
    this.searchesGetSearchItemsByAssociationScopeV1 = function(association, scope, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'association' is set
      if (association === undefined || association === null) {
        throw new Error("Missing the required parameter 'association' when calling searchesGetSearchItemsByAssociationScopeV1");
      }

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling searchesGetSearchItemsByAssociationScopeV1");
      }


      var pathParams = {
        'association': association,
        'scope': scope
      };
      var queryParams = {
        'links': opts['links'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SearchItemResponse;

      return this.apiClient.callApi(
        '/api/V1/getsearchitems/association/{association}/scope/{scope}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchesGetSearchItemsByAssociationScopeV2 operation.
     * @callback module:api/SearchesApi~searchesGetSearchItemsByAssociationScopeV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all saved searches by scope
     * Operation that returns a tree of saved queries, including scope, search name, IDs, and location within the tree.
     * @param {String} association Use to filter results by Business Object association ID.
     * @param {String} scope Use to filter results by scope name or ID.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.links Flag to include hyperlinks in results. Default is false. 
     * @param {module:api/SearchesApi~searchesGetSearchItemsByAssociationScopeV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerData}
     */
    this.searchesGetSearchItemsByAssociationScopeV2 = function(association, scope, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'association' is set
      if (association === undefined || association === null) {
        throw new Error("Missing the required parameter 'association' when calling searchesGetSearchItemsByAssociationScopeV2");
      }

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling searchesGetSearchItemsByAssociationScopeV2");
      }


      var pathParams = {
        'association': association,
        'scope': scope
      };
      var queryParams = {
        'links': opts['links'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ManagerData;

      return this.apiClient.callApi(
        '/api/V2/getsearchitems/association/{association}/scope/{scope}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchesGetSearchItemsByAssociationV1 operation.
     * @callback module:api/SearchesApi~searchesGetSearchItemsByAssociationV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all saved searches by Business Object association
     * Operation that returns a tree of saved queries, including scope, search name, IDs, and location within the tree.
     * @param {String} association Use to filter results by Business Object association ID.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.links Flag to include hyperlinks in results. Default is false. 
     * @param {module:api/SearchesApi~searchesGetSearchItemsByAssociationV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchItemResponse}
     */
    this.searchesGetSearchItemsByAssociationV1 = function(association, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'association' is set
      if (association === undefined || association === null) {
        throw new Error("Missing the required parameter 'association' when calling searchesGetSearchItemsByAssociationV1");
      }


      var pathParams = {
        'association': association
      };
      var queryParams = {
        'links': opts['links'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SearchItemResponse;

      return this.apiClient.callApi(
        '/api/V1/getsearchitems/association/{association}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchesGetSearchItemsByAssociationV2 operation.
     * @callback module:api/SearchesApi~searchesGetSearchItemsByAssociationV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all saved searches by Business Object association
     * Operation that returns a tree of saved queries, including scope, search name, IDs, and location within the tree.
     * @param {String} association Use to filter results by Business Object association ID.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.links Flag to include hyperlinks in results. Default is false. 
     * @param {module:api/SearchesApi~searchesGetSearchItemsByAssociationV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerData}
     */
    this.searchesGetSearchItemsByAssociationV2 = function(association, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'association' is set
      if (association === undefined || association === null) {
        throw new Error("Missing the required parameter 'association' when calling searchesGetSearchItemsByAssociationV2");
      }


      var pathParams = {
        'association': association
      };
      var queryParams = {
        'links': opts['links'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ManagerData;

      return this.apiClient.callApi(
        '/api/V2/getsearchitems/association/{association}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchesGetSearchItemsV1 operation.
     * @callback module:api/SearchesApi~searchesGetSearchItemsV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchItemResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all saved searches by default Business Object association
     * Operation that returns a tree of saved queries, including scope, search name, IDs, and location within the tree.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.links Flag to include hyperlinks in results. Default is false. 
     * @param {module:api/SearchesApi~searchesGetSearchItemsV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchItemResponse}
     */
    this.searchesGetSearchItemsV1 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'links': opts['links'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SearchItemResponse;

      return this.apiClient.callApi(
        '/api/V1/getsearchitems', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchesGetSearchItemsV2 operation.
     * @callback module:api/SearchesApi~searchesGetSearchItemsV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagerData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all saved searches by default Business Object association
     * Operation that returns a tree of saved queries, including scope, search name, IDs, and location within the tree.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.links Flag to include hyperlinks in results. Default is false. 
     * @param {module:api/SearchesApi~searchesGetSearchItemsV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagerData}
     */
    this.searchesGetSearchItemsV2 = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'links': opts['links'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ManagerData;

      return this.apiClient.callApi(
        '/api/V2/getsearchitems', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchesGetSearchResultsAdHocV1 operation.
     * @callback module:api/SearchesApi~searchesGetSearchResultsAdHocV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResultsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run an ad-hoc search
     * Operation that runs an ad-hoc Business Object search. To execute a search with Prompts, the PromptId and Value are required in the Prompt request object.&lt;/br&gt;&lt;/br&gt;PromptType is a FieldSubType enum as described below:&lt;/br&gt;FieldSubType&lt;/br&gt;None &#x3D; 0&lt;/br&gt;Text &#x3D; 1&lt;/br&gt;Number &#x3D; 2&lt;/br&gt;DateTime &#x3D; 3&lt;/br&gt;Logical &#x3D; 4&lt;/br&gt;Binary &#x3D; 5&lt;/br&gt;DateOnly &#x3D; 6&lt;/br&gt;TimeOnly &#x3D; 7&lt;/br&gt;Json &#x3D; 8&lt;/br&gt;JsonArray &#x3D; 9&lt;/br&gt;Xml &#x3D; 10&lt;/br&gt;XmlCollection &#x3D; 11&lt;/br&gt;TimeValue &#x3D; 12&lt;/br&gt;
     * @param {module:model/SearchResultsRequest} dataRequest Request object to specify search parameters.
     * @param {module:api/SearchesApi~searchesGetSearchResultsAdHocV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResultsResponse}
     */
    this.searchesGetSearchResultsAdHocV1 = function(dataRequest, callback) {
      var postBody = dataRequest;

      // verify the required parameter 'dataRequest' is set
      if (dataRequest === undefined || dataRequest === null) {
        throw new Error("Missing the required parameter 'dataRequest' when calling searchesGetSearchResultsAdHocV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SearchResultsResponse;

      return this.apiClient.callApi(
        '/api/V1/getsearchresults', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchesGetSearchResultsByIdV1 operation.
     * @callback module:api/SearchesApi~searchesGetSearchResultsByIdV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResultsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run a saved search by internal ID
     * Operation that returns the paged results of a saved search. When the search contains Prompts, the response contains the Prompt. Send the Prompt and the original operation parameters to  SearchResultsRequest to the getsearchresults ad-hoc http post operation.&lt;/br&gt;&lt;/br&gt;PromptType is a FieldSubType enum as described below:&lt;/br&gt;FieldSubType&lt;/br&gt;None &#x3D; 0&lt;/br&gt;Text &#x3D; 1&lt;/br&gt;Number &#x3D; 2&lt;/br&gt;DateTime &#x3D; 3&lt;/br&gt;Logical &#x3D; 4&lt;/br&gt;Binary &#x3D; 5&lt;/br&gt;DateOnly &#x3D; 6&lt;/br&gt;TimeOnly &#x3D; 7&lt;/br&gt;Json &#x3D; 8&lt;/br&gt;JsonArray &#x3D; 9&lt;/br&gt;Xml &#x3D; 10&lt;/br&gt;XmlCollection &#x3D; 11&lt;/br&gt;TimeValue &#x3D; 12&lt;/br&gt;
     * @param {String} association Specify the Business Object association ID for the saved search.
     * @param {String} scope Specify the scope name or ID for the saved search.
     * @param {String} scopeowner Specify the scope owner ID for the saved search. Use (None) when no scope owner exists.
     * @param {String} searchid Specify the internal ID for the saved search. Use \&quot;Run a saved search by name\&quot; if you do not have the internal ID.
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchTerm Specify search text filter the results. Example: Use \&quot;Service Request\&quot; to filter Incident results to include only service requests.
     * @param {Number} opts.pagenumber Specify the page number of the result set to return.
     * @param {Number} opts.pagesize Specify the number of rows to return per page.
     * @param {Boolean} opts.includeschema Use to include the table schema of the saved search. If false, results contain the fieldid and field value without field information. Default is false.
     * @param {Boolean} opts.resultsAsSimpleResultsList Indicates if the results should be returned in a simple results list format or a table format. Default is a table format.
     * @param {module:api/SearchesApi~searchesGetSearchResultsByIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResultsResponse}
     */
    this.searchesGetSearchResultsByIdV1 = function(association, scope, scopeowner, searchid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'association' is set
      if (association === undefined || association === null) {
        throw new Error("Missing the required parameter 'association' when calling searchesGetSearchResultsByIdV1");
      }

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling searchesGetSearchResultsByIdV1");
      }

      // verify the required parameter 'scopeowner' is set
      if (scopeowner === undefined || scopeowner === null) {
        throw new Error("Missing the required parameter 'scopeowner' when calling searchesGetSearchResultsByIdV1");
      }

      // verify the required parameter 'searchid' is set
      if (searchid === undefined || searchid === null) {
        throw new Error("Missing the required parameter 'searchid' when calling searchesGetSearchResultsByIdV1");
      }


      var pathParams = {
        'association': association,
        'scope': scope,
        'scopeowner': scopeowner,
        'searchid': searchid
      };
      var queryParams = {
        'searchTerm': opts['searchTerm'],
        'pagenumber': opts['pagenumber'],
        'pagesize': opts['pagesize'],
        'includeschema': opts['includeschema'],
        'resultsAsSimpleResultsList': opts['resultsAsSimpleResultsList'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SearchResultsResponse;

      return this.apiClient.callApi(
        '/api/V1/getsearchresults/association/{association}/scope/{scope}/scopeowner/{scopeowner}/searchid/{searchid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchesGetSearchResultsByNameV1 operation.
     * @callback module:api/SearchesApi~searchesGetSearchResultsByNameV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResultsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run a saved search by name
     * Operation that returns the paged results of a saved search. When the search contains Prompts, the response contains the Prompt. Send the Prompt and the original operation parameters to  SearchResultsRequest to the getsearchresults ad-hoc http post operation.&lt;/br&gt;&lt;/br&gt;PromptType is a FieldSubType enum as described below:&lt;/br&gt;FieldSubType&lt;/br&gt;None &#x3D; 0&lt;/br&gt;Text &#x3D; 1&lt;/br&gt;Number &#x3D; 2&lt;/br&gt;DateTime &#x3D; 3&lt;/br&gt;Logical &#x3D; 4&lt;/br&gt;Binary &#x3D; 5&lt;/br&gt;DateOnly &#x3D; 6&lt;/br&gt;TimeOnly &#x3D; 7&lt;/br&gt;Json &#x3D; 8&lt;/br&gt;JsonArray &#x3D; 9&lt;/br&gt;Xml &#x3D; 10&lt;/br&gt;XmlCollection &#x3D; 11&lt;/br&gt;TimeValue &#x3D; 12&lt;/br&gt;
     * @param {String} association Specify the Business Object association ID for the saved search.
     * @param {String} scope Specify the scope name or ID for the saved search.
     * @param {String} scopeowner Specify the scope owner ID for the saved search. Use (None) when no scope owner exists.
     * @param {String} searchname Specify the name of the saved search.
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchTerm Specify search text filter the results. Example: Use \&quot;Service Request\&quot; to filter Incident results to include only service requests.
     * @param {Number} opts.pagenumber Specify the page number of the result set to return.
     * @param {Number} opts.pagesize Specify the number of rows to return per page.
     * @param {Boolean} opts.includeschema Use to include the table schema of the saved search. If false, results contain the fieldid and field value without field information. Default is false.
     * @param {Boolean} opts.resultsAsSimpleResultsList Indicates if the results should be returned in a simple results list format or a table format. Default is a table format.
     * @param {module:api/SearchesApi~searchesGetSearchResultsByNameV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResultsResponse}
     */
    this.searchesGetSearchResultsByNameV1 = function(association, scope, scopeowner, searchname, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'association' is set
      if (association === undefined || association === null) {
        throw new Error("Missing the required parameter 'association' when calling searchesGetSearchResultsByNameV1");
      }

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling searchesGetSearchResultsByNameV1");
      }

      // verify the required parameter 'scopeowner' is set
      if (scopeowner === undefined || scopeowner === null) {
        throw new Error("Missing the required parameter 'scopeowner' when calling searchesGetSearchResultsByNameV1");
      }

      // verify the required parameter 'searchname' is set
      if (searchname === undefined || searchname === null) {
        throw new Error("Missing the required parameter 'searchname' when calling searchesGetSearchResultsByNameV1");
      }


      var pathParams = {
        'association': association,
        'scope': scope,
        'scopeowner': scopeowner,
        'searchname': searchname
      };
      var queryParams = {
        'searchTerm': opts['searchTerm'],
        'pagenumber': opts['pagenumber'],
        'pagesize': opts['pagesize'],
        'includeschema': opts['includeschema'],
        'resultsAsSimpleResultsList': opts['resultsAsSimpleResultsList'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SearchResultsResponse;

      return this.apiClient.callApi(
        '/api/V1/getsearchresults/association/{association}/scope/{scope}/scopeowner/{scopeowner}/searchname/{searchname}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchesGetSearchResultsExportAdHocV1 operation.
     * @callback module:api/SearchesApi~searchesGetSearchResultsExportAdHocV1Callback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export an ad-hoc search
     * Operation that returns an ad-hoc search in a specified export format: 0&#x3D;CSV, 1&#x3D;Excel, 2&#x3D;Tab, 3&#x3D;Word, 4&#x3D;Custom Separator, 5&#x3D;Simple JSON. To execute a search with Prompts, the PromptId and Value are required in the Prompt request object.&lt;/br&gt;&lt;/br&gt;PromptType is a FieldSubType enum as described below:&lt;/br&gt;FieldSubType&lt;/br&gt;None &#x3D; 0&lt;/br&gt;Text &#x3D; 1&lt;/br&gt;Number &#x3D; 2&lt;/br&gt;DateTime &#x3D; 3&lt;/br&gt;Logical &#x3D; 4&lt;/br&gt;Binary &#x3D; 5&lt;/br&gt;DateOnly &#x3D; 6&lt;/br&gt;TimeOnly &#x3D; 7&lt;/br&gt;Json &#x3D; 8&lt;/br&gt;JsonArray &#x3D; 9&lt;/br&gt;Xml &#x3D; 10&lt;/br&gt;XmlCollection &#x3D; 11&lt;/br&gt;TimeValue &#x3D; 12&lt;/br&gt;
     * @param {module:model/ExportSearchResultsRequest} dataRequest Request object to specify search parameters and export format.
     * @param {module:api/SearchesApi~searchesGetSearchResultsExportAdHocV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.searchesGetSearchResultsExportAdHocV1 = function(dataRequest, callback) {
      var postBody = dataRequest;

      // verify the required parameter 'dataRequest' is set
      if (dataRequest === undefined || dataRequest === null) {
        throw new Error("Missing the required parameter 'dataRequest' when calling searchesGetSearchResultsExportAdHocV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/V1/getsearchresultsexport', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchesGetSearchResultsExportByIdV1 operation.
     * @callback module:api/SearchesApi~searchesGetSearchResultsExportByIdV1Callback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export a saved search by ID
     * Operation that returns the paged results of a saved search in a specified format. When the search contains Prompts, the response contains the Prompt. Send the Prompt and the original operation parameters to  SearchResultsRequest to the getsearchresultsexport ad-hoc http post operation.&lt;/br&gt;&lt;/br&gt;PromptType is a FieldSubType enum as described below:&lt;/br&gt;FieldSubType&lt;/br&gt;None &#x3D; 0&lt;/br&gt;Text &#x3D; 1&lt;/br&gt;Number &#x3D; 2&lt;/br&gt;DateTime &#x3D; 3&lt;/br&gt;Logical &#x3D; 4&lt;/br&gt;Binary &#x3D; 5&lt;/br&gt;DateOnly &#x3D; 6&lt;/br&gt;TimeOnly &#x3D; 7&lt;/br&gt;Json &#x3D; 8&lt;/br&gt;JsonArray &#x3D; 9&lt;/br&gt;Xml &#x3D; 10&lt;/br&gt;XmlCollection &#x3D; 11&lt;/br&gt;TimeValue &#x3D; 12&lt;/br&gt;
     * @param {String} association Specify the Business Object association ID for the saved search.
     * @param {String} scope Specify the scope name or ID for the saved search.
     * @param {String} scopeowner Specify the scope owner ID for the saved search. Use (None) when no scope owner exists.
     * @param {String} searchid Specify the internal ID for the saved search. Use \&quot;Run a saved search by name\&quot; if you do not have the internal ID.
     * @param {module:model/String} exportformat Specify the format of the export
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchTerm Specify search text filter the results. Example: Use \&quot;Service Request\&quot; to filter Incident results to include only service requests.
     * @param {Number} opts.pagenumber Specify the page number of the result set to return.
     * @param {Number} opts.pagesize Specify the number of rows to return per page.
     * @param {module:api/SearchesApi~searchesGetSearchResultsExportByIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.searchesGetSearchResultsExportByIdV1 = function(association, scope, scopeowner, searchid, exportformat, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'association' is set
      if (association === undefined || association === null) {
        throw new Error("Missing the required parameter 'association' when calling searchesGetSearchResultsExportByIdV1");
      }

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling searchesGetSearchResultsExportByIdV1");
      }

      // verify the required parameter 'scopeowner' is set
      if (scopeowner === undefined || scopeowner === null) {
        throw new Error("Missing the required parameter 'scopeowner' when calling searchesGetSearchResultsExportByIdV1");
      }

      // verify the required parameter 'searchid' is set
      if (searchid === undefined || searchid === null) {
        throw new Error("Missing the required parameter 'searchid' when calling searchesGetSearchResultsExportByIdV1");
      }

      // verify the required parameter 'exportformat' is set
      if (exportformat === undefined || exportformat === null) {
        throw new Error("Missing the required parameter 'exportformat' when calling searchesGetSearchResultsExportByIdV1");
      }


      var pathParams = {
        'association': association,
        'scope': scope,
        'scopeowner': scopeowner,
        'searchid': searchid,
        'exportformat': exportformat
      };
      var queryParams = {
        'searchTerm': opts['searchTerm'],
        'pagenumber': opts['pagenumber'],
        'pagesize': opts['pagesize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/V1/getsearchresultsexport/association/{association}/scope/{scope}/scopeowner/{scopeowner}/searchid/{searchid}/exportformat/{exportformat}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the searchesGetSearchResultsExportByNameV1 operation.
     * @callback module:api/SearchesApi~searchesGetSearchResultsExportByNameV1Callback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export a saved search by name
     * Operation that returns the paged results of a saved search in a specified format. When the search contains Prompts, the response contains the Prompt. Send the Prompt and the original operation parameters to  SearchResultsRequest to the getsearchresultsexport ad-hoc http post operation.&lt;/br&gt;&lt;/br&gt;PromptType is a FieldSubType enum as described below:&lt;/br&gt;FieldSubType&lt;/br&gt;None &#x3D; 0&lt;/br&gt;Text &#x3D; 1&lt;/br&gt;Number &#x3D; 2&lt;/br&gt;DateTime &#x3D; 3&lt;/br&gt;Logical &#x3D; 4&lt;/br&gt;Binary &#x3D; 5&lt;/br&gt;DateOnly &#x3D; 6&lt;/br&gt;TimeOnly &#x3D; 7&lt;/br&gt;Json &#x3D; 8&lt;/br&gt;JsonArray &#x3D; 9&lt;/br&gt;Xml &#x3D; 10&lt;/br&gt;XmlCollection &#x3D; 11&lt;/br&gt;TimeValue &#x3D; 12&lt;/br&gt;
     * @param {String} association Specify the Business Object association ID for the saved search.
     * @param {String} scope Specify the scope name or ID for the saved search.
     * @param {String} scopeowner Specify the scope owner ID for the saved search. Use (None) when no scope owner exists.
     * @param {String} searchname Specify the name of the saved search.
     * @param {module:model/String} exportformat Specify the format of the export
     * @param {Object} opts Optional parameters
     * @param {String} opts.searchTerm Specify search text filter the results. Example: Use \&quot;Service Request\&quot; to filter Incident results to include only service requests.
     * @param {Number} opts.pagenumber Specify the page number of the result set to return.
     * @param {Number} opts.pagesize Specify the number of rows to return per page.
     * @param {module:api/SearchesApi~searchesGetSearchResultsExportByNameV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.searchesGetSearchResultsExportByNameV1 = function(association, scope, scopeowner, searchname, exportformat, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'association' is set
      if (association === undefined || association === null) {
        throw new Error("Missing the required parameter 'association' when calling searchesGetSearchResultsExportByNameV1");
      }

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling searchesGetSearchResultsExportByNameV1");
      }

      // verify the required parameter 'scopeowner' is set
      if (scopeowner === undefined || scopeowner === null) {
        throw new Error("Missing the required parameter 'scopeowner' when calling searchesGetSearchResultsExportByNameV1");
      }

      // verify the required parameter 'searchname' is set
      if (searchname === undefined || searchname === null) {
        throw new Error("Missing the required parameter 'searchname' when calling searchesGetSearchResultsExportByNameV1");
      }

      // verify the required parameter 'exportformat' is set
      if (exportformat === undefined || exportformat === null) {
        throw new Error("Missing the required parameter 'exportformat' when calling searchesGetSearchResultsExportByNameV1");
      }


      var pathParams = {
        'association': association,
        'scope': scope,
        'scopeowner': scopeowner,
        'searchname': searchname,
        'exportformat': exportformat
      };
      var queryParams = {
        'searchTerm': opts['searchTerm'],
        'pagenumber': opts['pagenumber'],
        'pagesize': opts['pagesize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/V1/getsearchresultsexport/association/{association}/scope/{scope}/scopeowner/{scopeowner}/searchname/{searchname}/exportformat/{exportformat}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
