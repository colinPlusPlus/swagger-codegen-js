/**
 * Cherwell Rest API
 * <a href=\"../../index.html\">Cherwell Rest API Documentation</a><br>Select version options from the header drop-down list (to the left of the Client Key box). Then, click Explore to view different versions of operations.
 *
 * OpenAPI spec version: 9.2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AttachmentsRequest', 'model/AttachmentsResponse', 'model/BarcodeLookupResponse', 'model/BatchDeleteRequest', 'model/BatchDeleteResponse', 'model/BatchReadRequest', 'model/BatchReadResponse', 'model/BatchSaveRequest', 'model/BatchSaveResponse', 'model/DeleteResponse', 'model/FieldValuesLookupRequest', 'model/FieldValuesLookupResponse', 'model/ReadResponse', 'model/RelatedBusinessObjectRequest', 'model/RelatedBusinessObjectResponse', 'model/RelatedSaveRequest', 'model/RelatedSaveResponse', 'model/SaveBusObAttachmentRequest', 'model/SaveLinkAttachmentRequest', 'model/SaveRequest', 'model/SaveResponse', 'model/SaveUrlAttachmentRequest', 'model/SchemaResponse', 'model/Summary', 'model/TemplateRequest', 'model/TemplateResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AttachmentsRequest'), require('../model/AttachmentsResponse'), require('../model/BarcodeLookupResponse'), require('../model/BatchDeleteRequest'), require('../model/BatchDeleteResponse'), require('../model/BatchReadRequest'), require('../model/BatchReadResponse'), require('../model/BatchSaveRequest'), require('../model/BatchSaveResponse'), require('../model/DeleteResponse'), require('../model/FieldValuesLookupRequest'), require('../model/FieldValuesLookupResponse'), require('../model/ReadResponse'), require('../model/RelatedBusinessObjectRequest'), require('../model/RelatedBusinessObjectResponse'), require('../model/RelatedSaveRequest'), require('../model/RelatedSaveResponse'), require('../model/SaveBusObAttachmentRequest'), require('../model/SaveLinkAttachmentRequest'), require('../model/SaveRequest'), require('../model/SaveResponse'), require('../model/SaveUrlAttachmentRequest'), require('../model/SchemaResponse'), require('../model/Summary'), require('../model/TemplateRequest'), require('../model/TemplateResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.CherwellRestApi) {
      root.CherwellRestApi = {};
    }
    root.CherwellRestApi.BusinessObjectApi = factory(root.CherwellRestApi.ApiClient, root.CherwellRestApi.AttachmentsRequest, root.CherwellRestApi.AttachmentsResponse, root.CherwellRestApi.BarcodeLookupResponse, root.CherwellRestApi.BatchDeleteRequest, root.CherwellRestApi.BatchDeleteResponse, root.CherwellRestApi.BatchReadRequest, root.CherwellRestApi.BatchReadResponse, root.CherwellRestApi.BatchSaveRequest, root.CherwellRestApi.BatchSaveResponse, root.CherwellRestApi.DeleteResponse, root.CherwellRestApi.FieldValuesLookupRequest, root.CherwellRestApi.FieldValuesLookupResponse, root.CherwellRestApi.ReadResponse, root.CherwellRestApi.RelatedBusinessObjectRequest, root.CherwellRestApi.RelatedBusinessObjectResponse, root.CherwellRestApi.RelatedSaveRequest, root.CherwellRestApi.RelatedSaveResponse, root.CherwellRestApi.SaveBusObAttachmentRequest, root.CherwellRestApi.SaveLinkAttachmentRequest, root.CherwellRestApi.SaveRequest, root.CherwellRestApi.SaveResponse, root.CherwellRestApi.SaveUrlAttachmentRequest, root.CherwellRestApi.SchemaResponse, root.CherwellRestApi.Summary, root.CherwellRestApi.TemplateRequest, root.CherwellRestApi.TemplateResponse);
  }
}(this, function(ApiClient, AttachmentsRequest, AttachmentsResponse, BarcodeLookupResponse, BatchDeleteRequest, BatchDeleteResponse, BatchReadRequest, BatchReadResponse, BatchSaveRequest, BatchSaveResponse, DeleteResponse, FieldValuesLookupRequest, FieldValuesLookupResponse, ReadResponse, RelatedBusinessObjectRequest, RelatedBusinessObjectResponse, RelatedSaveRequest, RelatedSaveResponse, SaveBusObAttachmentRequest, SaveLinkAttachmentRequest, SaveRequest, SaveResponse, SaveUrlAttachmentRequest, SchemaResponse, Summary, TemplateRequest, TemplateResponse) {
  'use strict';

  /**
   * BusinessObject service.
   * @module api/BusinessObjectApi
   * @version 9.2.0
   */

  /**
   * Constructs a new BusinessObjectApi. 
   * @alias module:api/BusinessObjectApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the businessObjectDeleteBusinessObjectBatchV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectDeleteBusinessObjectBatchV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Business Objects in a batch
     * Operation to delete a batch of Business Objects.
     * @param {module:model/BatchDeleteRequest} request Specify an array of Business Object IDs and record IDs or public IDs. Use a flag to stop on error or continue on error.
     * @param {module:api/BusinessObjectApi~businessObjectDeleteBusinessObjectBatchV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchDeleteResponse}
     */
    this.businessObjectDeleteBusinessObjectBatchV1 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling businessObjectDeleteBusinessObjectBatchV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = BatchDeleteResponse;

      return this.apiClient.callApi(
        '/api/V1/deletebusinessobjectbatch', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectDeleteBusinessObjectByPublicIdV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectDeleteBusinessObjectByPublicIdV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Business Object by public ID
     * Operation to delete a Business Object by Business Object ID.
     * @param {String} busobid Specify the Business Object ID.
     * @param {String} publicid Specify the Business Object public ID.
     * @param {module:api/BusinessObjectApi~businessObjectDeleteBusinessObjectByPublicIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteResponse}
     */
    this.businessObjectDeleteBusinessObjectByPublicIdV1 = function(busobid, publicid, callback) {
      var postBody = null;

      // verify the required parameter 'busobid' is set
      if (busobid === undefined || busobid === null) {
        throw new Error("Missing the required parameter 'busobid' when calling businessObjectDeleteBusinessObjectByPublicIdV1");
      }

      // verify the required parameter 'publicid' is set
      if (publicid === undefined || publicid === null) {
        throw new Error("Missing the required parameter 'publicid' when calling businessObjectDeleteBusinessObjectByPublicIdV1");
      }


      var pathParams = {
        'busobid': busobid,
        'publicid': publicid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DeleteResponse;

      return this.apiClient.callApi(
        '/api/V1/deletebusinessobject/busobid/{busobid}/publicid/{publicid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectDeleteBusinessObjectByRecIdV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectDeleteBusinessObjectByRecIdV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Business Object by record ID
     * Operation to delete a single Business Object.
     * @param {String} busobid Specify the Business Object ID.
     * @param {String} busobrecid  Specify the Business Object record ID.
     * @param {module:api/BusinessObjectApi~businessObjectDeleteBusinessObjectByRecIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteResponse}
     */
    this.businessObjectDeleteBusinessObjectByRecIdV1 = function(busobid, busobrecid, callback) {
      var postBody = null;

      // verify the required parameter 'busobid' is set
      if (busobid === undefined || busobid === null) {
        throw new Error("Missing the required parameter 'busobid' when calling businessObjectDeleteBusinessObjectByRecIdV1");
      }

      // verify the required parameter 'busobrecid' is set
      if (busobrecid === undefined || busobrecid === null) {
        throw new Error("Missing the required parameter 'busobrecid' when calling businessObjectDeleteBusinessObjectByRecIdV1");
      }


      var pathParams = {
        'busobid': busobid,
        'busobrecid': busobrecid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = DeleteResponse;

      return this.apiClient.callApi(
        '/api/V1/deletebusinessobject/busobid/{busobid}/busobrecid/{busobrecid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectDeleteRelatedBusinessObjectByPublicIdV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectDeleteRelatedBusinessObjectByPublicIdV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedBusinessObjectResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a related Business Object by public ID
     * Operation to delete a related Business Object. (Use \&quot;Unlink Related Business Object\&quot; to unlink two Business Objects rather that deleting the related Business Object.)
     * @param {String} parentbusobid Specify the Business Object ID for the parent Business Object.
     * @param {String} parentbusobrecid Specify the record ID for the parent Business Object
     * @param {String} relationshipid Specify the Relationship ID for the related Business Object you want to delete.
     * @param {String} publicid Specify the public ID for the related Business Object you want to delete. Use only for Business Objects with unique public IDs. Use \&quot;Delete a related Business Object by record ID\&quot; when public IDs are not unique.
     * @param {module:api/BusinessObjectApi~businessObjectDeleteRelatedBusinessObjectByPublicIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelatedBusinessObjectResponse}
     */
    this.businessObjectDeleteRelatedBusinessObjectByPublicIdV1 = function(parentbusobid, parentbusobrecid, relationshipid, publicid, callback) {
      var postBody = null;

      // verify the required parameter 'parentbusobid' is set
      if (parentbusobid === undefined || parentbusobid === null) {
        throw new Error("Missing the required parameter 'parentbusobid' when calling businessObjectDeleteRelatedBusinessObjectByPublicIdV1");
      }

      // verify the required parameter 'parentbusobrecid' is set
      if (parentbusobrecid === undefined || parentbusobrecid === null) {
        throw new Error("Missing the required parameter 'parentbusobrecid' when calling businessObjectDeleteRelatedBusinessObjectByPublicIdV1");
      }

      // verify the required parameter 'relationshipid' is set
      if (relationshipid === undefined || relationshipid === null) {
        throw new Error("Missing the required parameter 'relationshipid' when calling businessObjectDeleteRelatedBusinessObjectByPublicIdV1");
      }

      // verify the required parameter 'publicid' is set
      if (publicid === undefined || publicid === null) {
        throw new Error("Missing the required parameter 'publicid' when calling businessObjectDeleteRelatedBusinessObjectByPublicIdV1");
      }


      var pathParams = {
        'parentbusobid': parentbusobid,
        'parentbusobrecid': parentbusobrecid,
        'relationshipid': relationshipid,
        'publicid': publicid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RelatedBusinessObjectResponse;

      return this.apiClient.callApi(
        '/api/V1/deleterelatedbusinessobject/parentbusobid/{parentbusobid}/parentbusobrecid/{parentbusobrecid}/relationshipid/{relationshipid}/publicid/{publicid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectDeleteRelatedBusinessObjectByRecIdV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectDeleteRelatedBusinessObjectByRecIdV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedBusinessObjectResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a related Business Object by record ID
     * Operation to delete a related Business Object. (Use \&quot;Unlink Related Business Object\&quot; to unlink two Business Objects rather that deleting the related Business Object.)
     * @param {String} parentbusobid Specify the Business Object ID for the parent Business Object.
     * @param {String} parentbusobrecid Specify the record ID for the parent Business Object
     * @param {String} relationshipid Specify the Relationship ID for the related Business Object you want to delete.
     * @param {String} busobrecid Specify the record ID for the related Business Object you want to delete.
     * @param {module:api/BusinessObjectApi~businessObjectDeleteRelatedBusinessObjectByRecIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelatedBusinessObjectResponse}
     */
    this.businessObjectDeleteRelatedBusinessObjectByRecIdV1 = function(parentbusobid, parentbusobrecid, relationshipid, busobrecid, callback) {
      var postBody = null;

      // verify the required parameter 'parentbusobid' is set
      if (parentbusobid === undefined || parentbusobid === null) {
        throw new Error("Missing the required parameter 'parentbusobid' when calling businessObjectDeleteRelatedBusinessObjectByRecIdV1");
      }

      // verify the required parameter 'parentbusobrecid' is set
      if (parentbusobrecid === undefined || parentbusobrecid === null) {
        throw new Error("Missing the required parameter 'parentbusobrecid' when calling businessObjectDeleteRelatedBusinessObjectByRecIdV1");
      }

      // verify the required parameter 'relationshipid' is set
      if (relationshipid === undefined || relationshipid === null) {
        throw new Error("Missing the required parameter 'relationshipid' when calling businessObjectDeleteRelatedBusinessObjectByRecIdV1");
      }

      // verify the required parameter 'busobrecid' is set
      if (busobrecid === undefined || busobrecid === null) {
        throw new Error("Missing the required parameter 'busobrecid' when calling businessObjectDeleteRelatedBusinessObjectByRecIdV1");
      }


      var pathParams = {
        'parentbusobid': parentbusobid,
        'parentbusobrecid': parentbusobrecid,
        'relationshipid': relationshipid,
        'busobrecid': busobrecid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RelatedBusinessObjectResponse;

      return this.apiClient.callApi(
        '/api/V1/deleterelatedbusinessobject/parentbusobid/{parentbusobid}/parentbusobrecid/{parentbusobrecid}/relationshipid/{relationshipid}/busobrecid/{busobrecid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectFieldValuesLookupV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectFieldValuesLookupV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/FieldValuesLookupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get lookup values for fields
     * Operation to get potentially valid values for Business Object fields.
     * @param {module:model/FieldValuesLookupRequest} request Request object that specifies the Business Object and fields for which values are to be returned.
     * @param {module:api/BusinessObjectApi~businessObjectFieldValuesLookupV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FieldValuesLookupResponse}
     */
    this.businessObjectFieldValuesLookupV1 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling businessObjectFieldValuesLookupV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = FieldValuesLookupResponse;

      return this.apiClient.callApi(
        '/api/V1/fieldvalueslookup', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectGetBusinessObjectAttachmentByAttachmentIdV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectGetBusinessObjectAttachmentByAttachmentIdV1Callback
     * @param {String} error Error message, if any.
     * @param {'Blob'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an imported Business Object attachment
     * Operation to get a Business Object attachment that has been imported into the system.  HTTP Range Header can be used but is optional.
     * @param {String} attachmentid Specify the internal ID of the attachment record that contains information about the imported file.
     * @param {String} busobid Specify the Business Object ID.
     * @param {String} busobrecid Specify the Business Object record ID.
     * @param {module:api/BusinessObjectApi~businessObjectGetBusinessObjectAttachmentByAttachmentIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Blob'}
     */
    this.businessObjectGetBusinessObjectAttachmentByAttachmentIdV1 = function(attachmentid, busobid, busobrecid, callback) {
      var postBody = null;

      // verify the required parameter 'attachmentid' is set
      if (attachmentid === undefined || attachmentid === null) {
        throw new Error("Missing the required parameter 'attachmentid' when calling businessObjectGetBusinessObjectAttachmentByAttachmentIdV1");
      }

      // verify the required parameter 'busobid' is set
      if (busobid === undefined || busobid === null) {
        throw new Error("Missing the required parameter 'busobid' when calling businessObjectGetBusinessObjectAttachmentByAttachmentIdV1");
      }

      // verify the required parameter 'busobrecid' is set
      if (busobrecid === undefined || busobrecid === null) {
        throw new Error("Missing the required parameter 'busobrecid' when calling businessObjectGetBusinessObjectAttachmentByAttachmentIdV1");
      }


      var pathParams = {
        'attachmentid': attachmentid,
        'busobid': busobid,
        'busobrecid': busobrecid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/octet-stream'];
      var returnType = 'Blob';

      return this.apiClient.callApi(
        '/api/V1/getbusinessobjectattachment/attachmentid/{attachmentid}/busobid/{busobid}/busobrecid/{busobrecid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachmentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attachments by Business Object public ID
     * Operation to get attachments for a Business Object by Business Object ID and public ID.
     * @param {String} busobid Specify the Business Object ID.
     * @param {String} publicid Specify the Business Object public ID for the record that contains the attachments.
     * @param {module:model/String} type Record attachment type: &lt;/br&gt;&lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;&lt;/br&gt;File - Linked files. &lt;/br&gt;&lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;&lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;
     * @param {module:model/String} attachmenttype For file types, select the type of attachment: &lt;/br&gt;&lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;&lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;&lt;/br&gt;URL - Attachment is a URL.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includelinks Flag to include hyperlinks in results. Default is false. 
     * @param {module:api/BusinessObjectApi~businessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttachmentsResponse}
     */
    this.businessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1 = function(busobid, publicid, type, attachmenttype, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'busobid' is set
      if (busobid === undefined || busobid === null) {
        throw new Error("Missing the required parameter 'busobid' when calling businessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1");
      }

      // verify the required parameter 'publicid' is set
      if (publicid === undefined || publicid === null) {
        throw new Error("Missing the required parameter 'publicid' when calling businessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1");
      }

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling businessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1");
      }

      // verify the required parameter 'attachmenttype' is set
      if (attachmenttype === undefined || attachmenttype === null) {
        throw new Error("Missing the required parameter 'attachmenttype' when calling businessObjectGetBusinessObjectAttachmentsByIdAndPublicIdV1");
      }


      var pathParams = {
        'busobid': busobid,
        'publicid': publicid,
        'type': type,
        'attachmenttype': attachmenttype
      };
      var queryParams = {
        'includelinks': opts['includelinks'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = AttachmentsResponse;

      return this.apiClient.callApi(
        '/api/V1/getbusinessobjectattachments/busobid/{busobid}/publicid/{publicid}/type/{type}/attachmenttype/{attachmenttype}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachmentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attachments by Business Object record ID
     * Operation to get attachments for a Business Object by Business Object ID and record ID.
     * @param {String} busobid Specify the Business Object ID.
     * @param {String} busobrecid Specify the Business Object record ID.
     * @param {module:model/String} type Record attachment type: &lt;/br&gt;&lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;&lt;/br&gt;File - Linked files. &lt;/br&gt;&lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;&lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;
     * @param {module:model/String} attachmenttype For file types, select the type of attachment: &lt;/br&gt;&lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;&lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;&lt;/br&gt;URL - Attachment is a URL.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includelinks Flag to include hyperlinks in results. Default is false. 
     * @param {module:api/BusinessObjectApi~businessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttachmentsResponse}
     */
    this.businessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1 = function(busobid, busobrecid, type, attachmenttype, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'busobid' is set
      if (busobid === undefined || busobid === null) {
        throw new Error("Missing the required parameter 'busobid' when calling businessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1");
      }

      // verify the required parameter 'busobrecid' is set
      if (busobrecid === undefined || busobrecid === null) {
        throw new Error("Missing the required parameter 'busobrecid' when calling businessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1");
      }

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling businessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1");
      }

      // verify the required parameter 'attachmenttype' is set
      if (attachmenttype === undefined || attachmenttype === null) {
        throw new Error("Missing the required parameter 'attachmenttype' when calling businessObjectGetBusinessObjectAttachmentsByIdAndRecIdV1");
      }


      var pathParams = {
        'busobid': busobid,
        'busobrecid': busobrecid,
        'type': type,
        'attachmenttype': attachmenttype
      };
      var queryParams = {
        'includelinks': opts['includelinks'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = AttachmentsResponse;

      return this.apiClient.callApi(
        '/api/V1/getbusinessobjectattachments/busobid/{busobid}/busobrecid/{busobrecid}/type/{type}/attachmenttype/{attachmenttype}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachmentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attachments by Business Object name and public ID
     * Operation to get attachments for a Business Object by Business Object Name and public ID.
     * @param {String} busobname Specify the Business Object name.
     * @param {String} publicid Specify the Business Object public ID for the record that contains the attachments.
     * @param {module:model/String} type Record attachment type: &lt;/br&gt;&lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;&lt;/br&gt;File - Linked files. &lt;/br&gt;&lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;&lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;
     * @param {module:model/String} attachmenttype For file types, select the type of attachment: &lt;/br&gt;&lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;&lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;&lt;/br&gt;URL - Attachment is a URL.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includelinks Flag to include hyperlinks in results. Default is false. 
     * @param {module:api/BusinessObjectApi~businessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttachmentsResponse}
     */
    this.businessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1 = function(busobname, publicid, type, attachmenttype, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'busobname' is set
      if (busobname === undefined || busobname === null) {
        throw new Error("Missing the required parameter 'busobname' when calling businessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1");
      }

      // verify the required parameter 'publicid' is set
      if (publicid === undefined || publicid === null) {
        throw new Error("Missing the required parameter 'publicid' when calling businessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1");
      }

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling businessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1");
      }

      // verify the required parameter 'attachmenttype' is set
      if (attachmenttype === undefined || attachmenttype === null) {
        throw new Error("Missing the required parameter 'attachmenttype' when calling businessObjectGetBusinessObjectAttachmentsByNameAndPublicIdV1");
      }


      var pathParams = {
        'busobname': busobname,
        'publicid': publicid,
        'type': type,
        'attachmenttype': attachmenttype
      };
      var queryParams = {
        'includelinks': opts['includelinks'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = AttachmentsResponse;

      return this.apiClient.callApi(
        '/api/V1/getbusinessobjectattachments/busobname/{busobname}/publicid/{publicid}/type/{type}/attachmenttype/{attachmenttype}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachmentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get attachments by Business Object name and record ID
     * Operation to get attachments for a Business Object by name and record ID.
     * @param {String} busobname Specify the Business Object name.
     * @param {String} busobrecid Specify the Business Object record ID.
     * @param {module:model/String} type Record attachment type: &lt;/br&gt;&lt;/br&gt;None - Not applicable to the REST API. &lt;/br&gt;&lt;/br&gt;File - Linked files. &lt;/br&gt;&lt;/br&gt;FileManagerFile - Imported files.&lt;/br&gt;&lt;/br&gt;BusOb - Attached Business Objects. &lt;/br&gt;&lt;/br&gt;History - Information about the attachment, if any is available. For example, an e-mail message may store the name of an attachment sent.&lt;/br&gt;&lt;/br&gt;Other - Not applicable to the REST API. &lt;/br&gt;
     * @param {module:model/String} attachmenttype For file types, select the type of attachment: &lt;/br&gt;&lt;/br&gt;Imported - Attachment was imported into database. &lt;/br&gt;&lt;/br&gt;Linked - Attachment is linked to an external file. &lt;/br&gt;&lt;/br&gt;URL - Attachment is a URL.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includelinks Flag to include hyperlinks in results. Default is false. 
     * @param {module:api/BusinessObjectApi~businessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttachmentsResponse}
     */
    this.businessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1 = function(busobname, busobrecid, type, attachmenttype, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'busobname' is set
      if (busobname === undefined || busobname === null) {
        throw new Error("Missing the required parameter 'busobname' when calling businessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1");
      }

      // verify the required parameter 'busobrecid' is set
      if (busobrecid === undefined || busobrecid === null) {
        throw new Error("Missing the required parameter 'busobrecid' when calling businessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1");
      }

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling businessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1");
      }

      // verify the required parameter 'attachmenttype' is set
      if (attachmenttype === undefined || attachmenttype === null) {
        throw new Error("Missing the required parameter 'attachmenttype' when calling businessObjectGetBusinessObjectAttachmentsByNameAndRecIdV1");
      }


      var pathParams = {
        'busobname': busobname,
        'busobrecid': busobrecid,
        'type': type,
        'attachmenttype': attachmenttype
      };
      var queryParams = {
        'includelinks': opts['includelinks'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = AttachmentsResponse;

      return this.apiClient.callApi(
        '/api/V1/getbusinessobjectattachments/busobname/{busobname}/busobrecid/{busobrecid}/type/{type}/attachmenttype/{attachmenttype}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectGetBusinessObjectAttachmentsV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectGetBusinessObjectAttachmentsV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachmentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Business Object attachments by request object
     * Operation to get attachments for a Business Object by attachments request object.
     * @param {module:model/AttachmentsRequest} attachmentsRequest Object with all the parameters to request an attachments list. You can also request a list of types to get more than just one type at a time.
     * @param {module:api/BusinessObjectApi~businessObjectGetBusinessObjectAttachmentsV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttachmentsResponse}
     */
    this.businessObjectGetBusinessObjectAttachmentsV1 = function(attachmentsRequest, callback) {
      var postBody = attachmentsRequest;

      // verify the required parameter 'attachmentsRequest' is set
      if (attachmentsRequest === undefined || attachmentsRequest === null) {
        throw new Error("Missing the required parameter 'attachmentsRequest' when calling businessObjectGetBusinessObjectAttachmentsV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = AttachmentsResponse;

      return this.apiClient.callApi(
        '/api/V1/getbusinessobjectattachments', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectGetBusinessObjectBatchV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectGetBusinessObjectBatchV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchReadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a batch of Business Object records
     * Operation that returns a batch of Business Object records that includes a list of field record IDs, display names, and values for each record.
     * @param {module:model/BatchReadRequest} request Specify an array of Business Object IDs, record IDs, or public IDs. Use a flag to stop on error or continue on error.
     * @param {module:api/BusinessObjectApi~businessObjectGetBusinessObjectBatchV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchReadResponse}
     */
    this.businessObjectGetBusinessObjectBatchV1 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling businessObjectGetBusinessObjectBatchV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = BatchReadResponse;

      return this.apiClient.callApi(
        '/api/V1/getbusinessobjectbatch', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectGetBusinessObjectByCacheKeyV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectGetBusinessObjectByCacheKeyV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ReadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Business Object record
     * Operation that returns a Business Object record that includes a list of fields and their record IDs, names, and set values.
     * @param {String} cachekey The key of the item to get out of the cache
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.cacheScope The scope of the item to get out of the cache.  The default should be session.
     * @param {module:api/BusinessObjectApi~businessObjectGetBusinessObjectByCacheKeyV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReadResponse}
     */
    this.businessObjectGetBusinessObjectByCacheKeyV1 = function(cachekey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'cachekey' is set
      if (cachekey === undefined || cachekey === null) {
        throw new Error("Missing the required parameter 'cachekey' when calling businessObjectGetBusinessObjectByCacheKeyV1");
      }


      var pathParams = {
        'cachekey': cachekey
      };
      var queryParams = {
        'cacheScope': opts['cacheScope'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ReadResponse;

      return this.apiClient.callApi(
        '/api/V1/getbusinessobject/cachekey/{cachekey}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectGetBusinessObjectByPublicIdV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectGetBusinessObjectByPublicIdV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ReadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Business Object record
     * Operation that returns a Business Object record that includes a list of fields and their record IDs, names, and set values.
     * @param {String} busobid Specify the Business Object ID.
     * @param {String} publicid Specify the Business Object public ID.
     * @param {module:api/BusinessObjectApi~businessObjectGetBusinessObjectByPublicIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReadResponse}
     */
    this.businessObjectGetBusinessObjectByPublicIdV1 = function(busobid, publicid, callback) {
      var postBody = null;

      // verify the required parameter 'busobid' is set
      if (busobid === undefined || busobid === null) {
        throw new Error("Missing the required parameter 'busobid' when calling businessObjectGetBusinessObjectByPublicIdV1");
      }

      // verify the required parameter 'publicid' is set
      if (publicid === undefined || publicid === null) {
        throw new Error("Missing the required parameter 'publicid' when calling businessObjectGetBusinessObjectByPublicIdV1");
      }


      var pathParams = {
        'busobid': busobid,
        'publicid': publicid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ReadResponse;

      return this.apiClient.callApi(
        '/api/V1/getbusinessobject/busobid/{busobid}/publicid/{publicid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectGetBusinessObjectByRecIdV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectGetBusinessObjectByRecIdV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ReadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Business Object record
     * Operation that returns a Business Object record that includes a list of fields and their record IDs, names, and set values.
     * @param {String} busobid Specify the Business Object ID.
     * @param {String} busobrecid Specify the Business Object record ID.
     * @param {module:api/BusinessObjectApi~businessObjectGetBusinessObjectByRecIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReadResponse}
     */
    this.businessObjectGetBusinessObjectByRecIdV1 = function(busobid, busobrecid, callback) {
      var postBody = null;

      // verify the required parameter 'busobid' is set
      if (busobid === undefined || busobid === null) {
        throw new Error("Missing the required parameter 'busobid' when calling businessObjectGetBusinessObjectByRecIdV1");
      }

      // verify the required parameter 'busobrecid' is set
      if (busobrecid === undefined || busobrecid === null) {
        throw new Error("Missing the required parameter 'busobrecid' when calling businessObjectGetBusinessObjectByRecIdV1");
      }


      var pathParams = {
        'busobid': busobid,
        'busobrecid': busobrecid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = ReadResponse;

      return this.apiClient.callApi(
        '/api/V1/getbusinessobject/busobid/{busobid}/busobrecid/{busobrecid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectGetBusinessObjectByScanCodeBusObIdV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectGetBusinessObjectByScanCodeBusObIdV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/BarcodeLookupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Business Object by its scan code and Business Object ID.
     * Operation to get a Business Object based on its associated scan code and Business Object ID.
     * @param {String} scanCode The scan code for a Business Object record.
     * @param {String} busobid The Business Object ID.
     * @param {module:api/BusinessObjectApi~businessObjectGetBusinessObjectByScanCodeBusObIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BarcodeLookupResponse}
     */
    this.businessObjectGetBusinessObjectByScanCodeBusObIdV1 = function(scanCode, busobid, callback) {
      var postBody = null;

      // verify the required parameter 'scanCode' is set
      if (scanCode === undefined || scanCode === null) {
        throw new Error("Missing the required parameter 'scanCode' when calling businessObjectGetBusinessObjectByScanCodeBusObIdV1");
      }

      // verify the required parameter 'busobid' is set
      if (busobid === undefined || busobid === null) {
        throw new Error("Missing the required parameter 'busobid' when calling businessObjectGetBusinessObjectByScanCodeBusObIdV1");
      }


      var pathParams = {
        'scanCode': scanCode,
        'busobid': busobid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = BarcodeLookupResponse;

      return this.apiClient.callApi(
        '/api/V1/getbusinessobject/scancode/{scanCode}/busobid/{busobid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectGetBusinessObjectByScanCodeBusObNameV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectGetBusinessObjectByScanCodeBusObNameV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/BarcodeLookupResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Business Object by its scan code and Business Object name.
     * Operation to get a Business Object based on its associated scan code and Business Object name.
     * @param {String} scanCode The scan code for a Business Object record.
     * @param {String} busobname The Business Bbject name.
     * @param {module:api/BusinessObjectApi~businessObjectGetBusinessObjectByScanCodeBusObNameV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BarcodeLookupResponse}
     */
    this.businessObjectGetBusinessObjectByScanCodeBusObNameV1 = function(scanCode, busobname, callback) {
      var postBody = null;

      // verify the required parameter 'scanCode' is set
      if (scanCode === undefined || scanCode === null) {
        throw new Error("Missing the required parameter 'scanCode' when calling businessObjectGetBusinessObjectByScanCodeBusObNameV1");
      }

      // verify the required parameter 'busobname' is set
      if (busobname === undefined || busobname === null) {
        throw new Error("Missing the required parameter 'busobname' when calling businessObjectGetBusinessObjectByScanCodeBusObNameV1");
      }


      var pathParams = {
        'scanCode': scanCode,
        'busobname': busobname
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = BarcodeLookupResponse;

      return this.apiClient.callApi(
        '/api/V1/getbusinessobject/scancode/{scanCode}/busobname/{busobname}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectGetBusinessObjectSchemaV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectGetBusinessObjectSchemaV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SchemaResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Business Object schema
     * Operation that returns the schema for a Business Object and, optionally, its related Business Objects.
     * @param {String} busobId Specify the Business Object ID.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includerelationships Flag to include schemas for related Business Object. Default is false.
     * @param {module:api/BusinessObjectApi~businessObjectGetBusinessObjectSchemaV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SchemaResponse}
     */
    this.businessObjectGetBusinessObjectSchemaV1 = function(busobId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'busobId' is set
      if (busobId === undefined || busobId === null) {
        throw new Error("Missing the required parameter 'busobId' when calling businessObjectGetBusinessObjectSchemaV1");
      }


      var pathParams = {
        'busobId': busobId
      };
      var queryParams = {
        'includerelationships': opts['includerelationships'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SchemaResponse;

      return this.apiClient.callApi(
        '/api/V1/getbusinessobjectschema/busobid/{busobId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectGetBusinessObjectSummariesV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectGetBusinessObjectSummariesV1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Summary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Business Object summaries by type
     * Operation that returns a list of Business Object summaries by type (Major, Supporting, Lookup, Groups, and All). 
     * @param {module:model/String} type Use to show:&lt;br /&gt;All - All objects&lt;br /&gt;Major - Major objects only&lt;br /&gt;Supporting - Supporting objects only&lt;br /&gt;Lookup - Lookup objects only&lt;br /&gt;Groups - Groups only
     * @param {module:api/BusinessObjectApi~businessObjectGetBusinessObjectSummariesV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Summary>}
     */
    this.businessObjectGetBusinessObjectSummariesV1 = function(type, callback) {
      var postBody = null;

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling businessObjectGetBusinessObjectSummariesV1");
      }


      var pathParams = {
        'type': type
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [Summary];

      return this.apiClient.callApi(
        '/api/V1/getbusinessobjectsummaries/type/{type}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectGetBusinessObjectSummaryByIdV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectGetBusinessObjectSummaryByIdV1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Summary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Business Object summary by ID
     * Operation that returns a single Business Object summary by ID.
     * @param {String} busobid Specify a Business Object ID to get its summary.
     * @param {module:api/BusinessObjectApi~businessObjectGetBusinessObjectSummaryByIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Summary>}
     */
    this.businessObjectGetBusinessObjectSummaryByIdV1 = function(busobid, callback) {
      var postBody = null;

      // verify the required parameter 'busobid' is set
      if (busobid === undefined || busobid === null) {
        throw new Error("Missing the required parameter 'busobid' when calling businessObjectGetBusinessObjectSummaryByIdV1");
      }


      var pathParams = {
        'busobid': busobid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [Summary];

      return this.apiClient.callApi(
        '/api/V1/getbusinessobjectsummary/busobid/{busobid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectGetBusinessObjectSummaryByNameV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectGetBusinessObjectSummaryByNameV1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Summary>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a Business Object summary by name
     * Operation that returns a single Business Object summary by name.
     * @param {String} busobname Specify a Business Object name to get its summary.
     * @param {module:api/BusinessObjectApi~businessObjectGetBusinessObjectSummaryByNameV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Summary>}
     */
    this.businessObjectGetBusinessObjectSummaryByNameV1 = function(busobname, callback) {
      var postBody = null;

      // verify the required parameter 'busobname' is set
      if (busobname === undefined || busobname === null) {
        throw new Error("Missing the required parameter 'busobname' when calling businessObjectGetBusinessObjectSummaryByNameV1");
      }


      var pathParams = {
        'busobname': busobname
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = [Summary];

      return this.apiClient.callApi(
        '/api/V1/getbusinessobjectsummary/busobname/{busobname}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectGetBusinessObjectTemplateV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectGetBusinessObjectTemplateV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TemplateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Business Object templates for create
     * Operation that returns a template to create Business Objects.  The template includes placeholders for field values. You can then send the template with these values to the Business Object Save operation.
     * @param {module:model/TemplateRequest} request Specify the Business Object ID. Use true to include all required fields or all fields. Specify an optional fields list by adding field names in a comma-delimited list [\&quot;field1\&quot;, \&quot;field2\&quot;]. 
     * @param {module:api/BusinessObjectApi~businessObjectGetBusinessObjectTemplateV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TemplateResponse}
     */
    this.businessObjectGetBusinessObjectTemplateV1 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling businessObjectGetBusinessObjectTemplateV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = TemplateResponse;

      return this.apiClient.callApi(
        '/api/V1/getbusinessobjecttemplate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectGetRelatedBusinessObjectByRequestV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectGetRelatedBusinessObjectByRequestV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedBusinessObjectResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get related Business Objects using a request object
     * Operation to get related Business Objects for a specific relationship. Specify a list of fields to include in the response. The order of parameter usage and overrides is: all fields set to true overrides default overrides;  custom grid overrides field list settings.
     * @param {module:model/RelatedBusinessObjectRequest} relatedBusinessObjectRequest Request object containing all the possible parameters to get related Business Objects.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.includelinks Flag to include hyperlinks in results. Default is false. 
     * @param {module:api/BusinessObjectApi~businessObjectGetRelatedBusinessObjectByRequestV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelatedBusinessObjectResponse}
     */
    this.businessObjectGetRelatedBusinessObjectByRequestV1 = function(relatedBusinessObjectRequest, opts, callback) {
      opts = opts || {};
      var postBody = relatedBusinessObjectRequest;

      // verify the required parameter 'relatedBusinessObjectRequest' is set
      if (relatedBusinessObjectRequest === undefined || relatedBusinessObjectRequest === null) {
        throw new Error("Missing the required parameter 'relatedBusinessObjectRequest' when calling businessObjectGetRelatedBusinessObjectByRequestV1");
      }


      var pathParams = {
      };
      var queryParams = {
        'includelinks': opts['includelinks'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RelatedBusinessObjectResponse;

      return this.apiClient.callApi(
        '/api/V1/getrelatedbusinessobject', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectGetRelatedBusinessObjectV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectGetRelatedBusinessObjectV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedBusinessObjectResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get related Business Objects by ID
     * Operation to get the related objects for a Business Object relationship specifying all fields or default grid as the field to return.
     * @param {String} parentbusobid Specify the Business Object ID for the parent Business Object.
     * @param {String} parentbusobrecid Specify the record ID for the parent Business Object.
     * @param {String} relationshipid Specify the Relationship ID for the related Business Object you want to return.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageNumber Specify the page number of the result set to return.
     * @param {Number} opts.pageSize Specify the number of rows to return per page.
     * @param {Boolean} opts.allfields Flag to include all related Business Object fields.  Default is true if not supplied.  If true, then UseDefaultGrid is not used.
     * @param {Boolean} opts.usedefaultgrid Flag to trigger the use of the related Business Objects default grid for the list of fields to return.
     * @param {Boolean} opts.includelinks Flag to include hyperlinks in results. Default is false. 
     * @param {module:api/BusinessObjectApi~businessObjectGetRelatedBusinessObjectV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelatedBusinessObjectResponse}
     */
    this.businessObjectGetRelatedBusinessObjectV1 = function(parentbusobid, parentbusobrecid, relationshipid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'parentbusobid' is set
      if (parentbusobid === undefined || parentbusobid === null) {
        throw new Error("Missing the required parameter 'parentbusobid' when calling businessObjectGetRelatedBusinessObjectV1");
      }

      // verify the required parameter 'parentbusobrecid' is set
      if (parentbusobrecid === undefined || parentbusobrecid === null) {
        throw new Error("Missing the required parameter 'parentbusobrecid' when calling businessObjectGetRelatedBusinessObjectV1");
      }

      // verify the required parameter 'relationshipid' is set
      if (relationshipid === undefined || relationshipid === null) {
        throw new Error("Missing the required parameter 'relationshipid' when calling businessObjectGetRelatedBusinessObjectV1");
      }


      var pathParams = {
        'parentbusobid': parentbusobid,
        'parentbusobrecid': parentbusobrecid,
        'relationshipid': relationshipid
      };
      var queryParams = {
        'pageNumber': opts['pageNumber'],
        'pageSize': opts['pageSize'],
        'allfields': opts['allfields'],
        'usedefaultgrid': opts['usedefaultgrid'],
        'includelinks': opts['includelinks'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RelatedBusinessObjectResponse;

      return this.apiClient.callApi(
        '/api/V1/getrelatedbusinessobject/parentbusobid/{parentbusobid}/parentbusobrecid/{parentbusobrecid}/relationshipid/{relationshipid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectGetRelatedBusinessObjectWithCustomGridV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectGetRelatedBusinessObjectWithCustomGridV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedBusinessObjectResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get related Business Objects custom grid
     * Operation to get related Business Objects for a specific relationship. Specify a custom grid ID as the fields to return.
     * @param {String} parentbusobid Specify the Business Object ID for the parent Business Object.
     * @param {String} parentbusobrecid Specify the record ID for the parent Business Object.
     * @param {String} relationshipid Specify the Relationship ID for the related Business Object you want to return.
     * @param {String} gridid Specify the ID for the custom grid that contains the field list.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pageNumber Specify the page number of the result set to return.
     * @param {Number} opts.pageSize Specify the number of rows to return per page.
     * @param {Boolean} opts.includelinks Flag to include hyperlinks in results. Default is false. 
     * @param {module:api/BusinessObjectApi~businessObjectGetRelatedBusinessObjectWithCustomGridV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelatedBusinessObjectResponse}
     */
    this.businessObjectGetRelatedBusinessObjectWithCustomGridV1 = function(parentbusobid, parentbusobrecid, relationshipid, gridid, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'parentbusobid' is set
      if (parentbusobid === undefined || parentbusobid === null) {
        throw new Error("Missing the required parameter 'parentbusobid' when calling businessObjectGetRelatedBusinessObjectWithCustomGridV1");
      }

      // verify the required parameter 'parentbusobrecid' is set
      if (parentbusobrecid === undefined || parentbusobrecid === null) {
        throw new Error("Missing the required parameter 'parentbusobrecid' when calling businessObjectGetRelatedBusinessObjectWithCustomGridV1");
      }

      // verify the required parameter 'relationshipid' is set
      if (relationshipid === undefined || relationshipid === null) {
        throw new Error("Missing the required parameter 'relationshipid' when calling businessObjectGetRelatedBusinessObjectWithCustomGridV1");
      }

      // verify the required parameter 'gridid' is set
      if (gridid === undefined || gridid === null) {
        throw new Error("Missing the required parameter 'gridid' when calling businessObjectGetRelatedBusinessObjectWithCustomGridV1");
      }


      var pathParams = {
        'parentbusobid': parentbusobid,
        'parentbusobrecid': parentbusobrecid,
        'relationshipid': relationshipid,
        'gridid': gridid
      };
      var queryParams = {
        'pageNumber': opts['pageNumber'],
        'pageSize': opts['pageSize'],
        'includelinks': opts['includelinks'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RelatedBusinessObjectResponse;

      return this.apiClient.callApi(
        '/api/V1/getrelatedbusinessobject/parentbusobid/{parentbusobid}/parentbusobrecid/{parentbusobrecid}/relationshipid/{relationshipid}/gridid/{gridid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectLinkRelatedBusinessObjectByRecIdV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectLinkRelatedBusinessObjectByRecIdV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedBusinessObjectResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Link related Business Objects
     * Operation to link related Business Objects. 
     * @param {String} parentbusobid Specify the Business Object ID for the parent Business Object.
     * @param {String} parentbusobrecid Specify the record ID for the parent Business Object.
     * @param {String} relationshipid Specify the Relationship ID for the related Business Object you want to link.
     * @param {String} busobid Specify the Business Object ID of the Business Object to be linked.
     * @param {String} busobrecid Specify the Business Object record ID of the Business Object to be linked.
     * @param {module:api/BusinessObjectApi~businessObjectLinkRelatedBusinessObjectByRecIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelatedBusinessObjectResponse}
     */
    this.businessObjectLinkRelatedBusinessObjectByRecIdV1 = function(parentbusobid, parentbusobrecid, relationshipid, busobid, busobrecid, callback) {
      var postBody = null;

      // verify the required parameter 'parentbusobid' is set
      if (parentbusobid === undefined || parentbusobid === null) {
        throw new Error("Missing the required parameter 'parentbusobid' when calling businessObjectLinkRelatedBusinessObjectByRecIdV1");
      }

      // verify the required parameter 'parentbusobrecid' is set
      if (parentbusobrecid === undefined || parentbusobrecid === null) {
        throw new Error("Missing the required parameter 'parentbusobrecid' when calling businessObjectLinkRelatedBusinessObjectByRecIdV1");
      }

      // verify the required parameter 'relationshipid' is set
      if (relationshipid === undefined || relationshipid === null) {
        throw new Error("Missing the required parameter 'relationshipid' when calling businessObjectLinkRelatedBusinessObjectByRecIdV1");
      }

      // verify the required parameter 'busobid' is set
      if (busobid === undefined || busobid === null) {
        throw new Error("Missing the required parameter 'busobid' when calling businessObjectLinkRelatedBusinessObjectByRecIdV1");
      }

      // verify the required parameter 'busobrecid' is set
      if (busobrecid === undefined || busobrecid === null) {
        throw new Error("Missing the required parameter 'busobrecid' when calling businessObjectLinkRelatedBusinessObjectByRecIdV1");
      }


      var pathParams = {
        'parentbusobid': parentbusobid,
        'parentbusobrecid': parentbusobrecid,
        'relationshipid': relationshipid,
        'busobid': busobid,
        'busobrecid': busobrecid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RelatedBusinessObjectResponse;

      return this.apiClient.callApi(
        '/api/V1/linkrelatedbusinessobject/parentbusobid/{parentbusobid}/parentbusobrecid/{parentbusobrecid}/relationshipid/{relationshipid}/busobid/{busobid}/busobrecid/{busobrecid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectRemoveBusinessObjectAttachmentByIdAndPublicIdV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectRemoveBusinessObjectAttachmentByIdAndPublicIdV1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an attachment by Business Object ID and public ID
     * Operation to remove an attachment from a Business Object using the attachment record ID, Business Object ID, and Business Object public ID.
     * @param {String} attachmentid Specify the internal ID of the attachment record.
     * @param {String} busobid Specify the Business Object ID.
     * @param {String} publicid Specify the Business Object public ID.
     * @param {module:api/BusinessObjectApi~businessObjectRemoveBusinessObjectAttachmentByIdAndPublicIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.businessObjectRemoveBusinessObjectAttachmentByIdAndPublicIdV1 = function(attachmentid, busobid, publicid, callback) {
      var postBody = null;

      // verify the required parameter 'attachmentid' is set
      if (attachmentid === undefined || attachmentid === null) {
        throw new Error("Missing the required parameter 'attachmentid' when calling businessObjectRemoveBusinessObjectAttachmentByIdAndPublicIdV1");
      }

      // verify the required parameter 'busobid' is set
      if (busobid === undefined || busobid === null) {
        throw new Error("Missing the required parameter 'busobid' when calling businessObjectRemoveBusinessObjectAttachmentByIdAndPublicIdV1");
      }

      // verify the required parameter 'publicid' is set
      if (publicid === undefined || publicid === null) {
        throw new Error("Missing the required parameter 'publicid' when calling businessObjectRemoveBusinessObjectAttachmentByIdAndPublicIdV1");
      }


      var pathParams = {
        'attachmentid': attachmentid,
        'busobid': busobid,
        'publicid': publicid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/V1/removebusinessobjectattachment/attachmentid/{attachmentid}/busobid/{busobid}/publicid/{publicid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectRemoveBusinessObjectAttachmentByIdAndRecIdV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectRemoveBusinessObjectAttachmentByIdAndRecIdV1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an attachment by Business Object ID and record ID
     * Operation to remove an attachment from a Business Object using the attachment record ID, Business Object ID, and Business Object record ID.
     * @param {String} attachmentid Specify the internal ID of the attachment record.
     * @param {String} busobid Specify the Business Object ID.
     * @param {String} busobrecid Specify the Business Object record ID.
     * @param {module:api/BusinessObjectApi~businessObjectRemoveBusinessObjectAttachmentByIdAndRecIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.businessObjectRemoveBusinessObjectAttachmentByIdAndRecIdV1 = function(attachmentid, busobid, busobrecid, callback) {
      var postBody = null;

      // verify the required parameter 'attachmentid' is set
      if (attachmentid === undefined || attachmentid === null) {
        throw new Error("Missing the required parameter 'attachmentid' when calling businessObjectRemoveBusinessObjectAttachmentByIdAndRecIdV1");
      }

      // verify the required parameter 'busobid' is set
      if (busobid === undefined || busobid === null) {
        throw new Error("Missing the required parameter 'busobid' when calling businessObjectRemoveBusinessObjectAttachmentByIdAndRecIdV1");
      }

      // verify the required parameter 'busobrecid' is set
      if (busobrecid === undefined || busobrecid === null) {
        throw new Error("Missing the required parameter 'busobrecid' when calling businessObjectRemoveBusinessObjectAttachmentByIdAndRecIdV1");
      }


      var pathParams = {
        'attachmentid': attachmentid,
        'busobid': busobid,
        'busobrecid': busobrecid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/V1/removebusinessobjectattachment/attachmentid/{attachmentid}/busobid/{busobid}/busobrecid/{busobrecid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectRemoveBusinessObjectAttachmentByNameAndPublicIdV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectRemoveBusinessObjectAttachmentByNameAndPublicIdV1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an attachment by Business Object name and public ID
     * Operation to remove an attachment from a Business Object using the attachment record ID, Business Object name, and Business Object record ID.
     * @param {String} attachmentid Specify the internal ID of the attachment record.
     * @param {String} busobname Specify the Business Object name.
     * @param {String} publicid Specify the Business Object public ID.
     * @param {module:api/BusinessObjectApi~businessObjectRemoveBusinessObjectAttachmentByNameAndPublicIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.businessObjectRemoveBusinessObjectAttachmentByNameAndPublicIdV1 = function(attachmentid, busobname, publicid, callback) {
      var postBody = null;

      // verify the required parameter 'attachmentid' is set
      if (attachmentid === undefined || attachmentid === null) {
        throw new Error("Missing the required parameter 'attachmentid' when calling businessObjectRemoveBusinessObjectAttachmentByNameAndPublicIdV1");
      }

      // verify the required parameter 'busobname' is set
      if (busobname === undefined || busobname === null) {
        throw new Error("Missing the required parameter 'busobname' when calling businessObjectRemoveBusinessObjectAttachmentByNameAndPublicIdV1");
      }

      // verify the required parameter 'publicid' is set
      if (publicid === undefined || publicid === null) {
        throw new Error("Missing the required parameter 'publicid' when calling businessObjectRemoveBusinessObjectAttachmentByNameAndPublicIdV1");
      }


      var pathParams = {
        'attachmentid': attachmentid,
        'busobname': busobname,
        'publicid': publicid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/V1/removebusinessobjectattachment/attachmentid/{attachmentid}/busobname/{busobname}/publicid/{publicid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectRemoveBusinessObjectAttachmentByNameAndRecIdV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectRemoveBusinessObjectAttachmentByNameAndRecIdV1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove an attachment by Business Object name and record ID
     * Operation to remove an attachment from a Business Object using the attachment record ID, Business Object name, and Business Object public ID.
     * @param {String} attachmentid Specify the internal ID of the attachment record.
     * @param {String} busobname Specify the Business Object name.
     * @param {String} busobrecid Specify the Business Object record ID.
     * @param {module:api/BusinessObjectApi~businessObjectRemoveBusinessObjectAttachmentByNameAndRecIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.businessObjectRemoveBusinessObjectAttachmentByNameAndRecIdV1 = function(attachmentid, busobname, busobrecid, callback) {
      var postBody = null;

      // verify the required parameter 'attachmentid' is set
      if (attachmentid === undefined || attachmentid === null) {
        throw new Error("Missing the required parameter 'attachmentid' when calling businessObjectRemoveBusinessObjectAttachmentByNameAndRecIdV1");
      }

      // verify the required parameter 'busobname' is set
      if (busobname === undefined || busobname === null) {
        throw new Error("Missing the required parameter 'busobname' when calling businessObjectRemoveBusinessObjectAttachmentByNameAndRecIdV1");
      }

      // verify the required parameter 'busobrecid' is set
      if (busobrecid === undefined || busobrecid === null) {
        throw new Error("Missing the required parameter 'busobrecid' when calling businessObjectRemoveBusinessObjectAttachmentByNameAndRecIdV1");
      }


      var pathParams = {
        'attachmentid': attachmentid,
        'busobname': busobname,
        'busobrecid': busobrecid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/V1/removebusinessobjectattachment/attachmentid/{attachmentid}/busobname/{busobname}/busobrecid/{busobrecid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectSaveBusinessObjectAttachmentBusObV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectSaveBusinessObjectAttachmentBusObV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachmentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a Business Object to a Business Object
     * Operation to attach a Business Object to a Business Object. This links the Business Object but does not create a relationship between the two. (Use \&quot;Link Related Business Objects\&quot; to create a relationship.)
     * @param {module:model/SaveBusObAttachmentRequest} request Request object used to specify the Business Objects to attach. You can use Business Object name or ID and Business Object record ID or public ID.
     * @param {module:api/BusinessObjectApi~businessObjectSaveBusinessObjectAttachmentBusObV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttachmentsResponse}
     */
    this.businessObjectSaveBusinessObjectAttachmentBusObV1 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling businessObjectSaveBusinessObjectAttachmentBusObV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = AttachmentsResponse;

      return this.apiClient.callApi(
        '/api/V1/savebusinessobjectattachmentbusob', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectSaveBusinessObjectAttachmentLinkV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectSaveBusinessObjectAttachmentLinkV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachmentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a file via UNC
     * Operation to attach a file to a Business Object via a path (UNC recommended).
     * @param {module:model/SaveLinkAttachmentRequest} request Request object used to specify the file path (UNC recommended) and the Business Object. You can use Business Object name or ID and Business Object record ID or public ID.
     * @param {module:api/BusinessObjectApi~businessObjectSaveBusinessObjectAttachmentLinkV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttachmentsResponse}
     */
    this.businessObjectSaveBusinessObjectAttachmentLinkV1 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling businessObjectSaveBusinessObjectAttachmentLinkV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = AttachmentsResponse;

      return this.apiClient.callApi(
        '/api/V1/savebusinessobjectattachmentlink', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectSaveBusinessObjectAttachmentUrlV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectSaveBusinessObjectAttachmentUrlV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachmentsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach a URL path
     * Operation to attach a URL path to a Business Object.
     * @param {module:model/SaveUrlAttachmentRequest} request Request object used to specify the URL path and Business Object. You can use Business Object name or ID and Business Object record ID or public ID.
     * @param {module:api/BusinessObjectApi~businessObjectSaveBusinessObjectAttachmentUrlV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttachmentsResponse}
     */
    this.businessObjectSaveBusinessObjectAttachmentUrlV1 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling businessObjectSaveBusinessObjectAttachmentUrlV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = AttachmentsResponse;

      return this.apiClient.callApi(
        '/api/V1/savebusinessobjectattachmenturl', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectSaveBusinessObjectBatchV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectSaveBusinessObjectBatchV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchSaveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a batch of Business Objects
     * Operation that creates or updates an array of Business Objects in a batch. To update, specify record ID or public ID. To create, leave record ID and public ID empty.
     * @param {module:model/BatchSaveRequest} request Specify the array of Business Object templates. 
     * @param {module:api/BusinessObjectApi~businessObjectSaveBusinessObjectBatchV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchSaveResponse}
     */
    this.businessObjectSaveBusinessObjectBatchV1 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling businessObjectSaveBusinessObjectBatchV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = BatchSaveResponse;

      return this.apiClient.callApi(
        '/api/V1/savebusinessobjectbatch', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectSaveBusinessObjectV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectSaveBusinessObjectV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/SaveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or Update a Business Object
     * Operation that creates a new Business Object or updates an existing Business Object. To create, leave record ID and public ID empty. Upon creating or saving, a cache key is returned to use for subsequent requests. If the object is not found in the cache with said cache key, specify record ID or public ID to save and return a new cache key. Set persist &#x3D; true, to actually save the business object to disk, persist &#x3D; false will just cache it.
     * @param {module:model/SaveRequest} request Specify a list of fields from a Business Object template. 
     * @param {module:api/BusinessObjectApi~businessObjectSaveBusinessObjectV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SaveResponse}
     */
    this.businessObjectSaveBusinessObjectV1 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling businessObjectSaveBusinessObjectV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = SaveResponse;

      return this.apiClient.callApi(
        '/api/V1/savebusinessobject', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectSaveRelatedBusinessObjectV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectSaveRelatedBusinessObjectV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedSaveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a related Business Object
     * Operation that creates or updates a related Business Object. To update, specify record ID or public ID. To create, leave record ID and public ID empty.
     * @param {module:model/RelatedSaveRequest} request Request object specifying the parent the Business Object, the Relationship, and field values for the Business Object to create or update. 
     * @param {module:api/BusinessObjectApi~businessObjectSaveRelatedBusinessObjectV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelatedSaveResponse}
     */
    this.businessObjectSaveRelatedBusinessObjectV1 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling businessObjectSaveRelatedBusinessObjectV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RelatedSaveResponse;

      return this.apiClient.callApi(
        '/api/V1/saverelatedbusinessobject', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectUnLinkRelatedBusinessObjectByRecIdV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectUnLinkRelatedBusinessObjectByRecIdV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/RelatedBusinessObjectResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * UnLink related Business Objects
     * Operation to unlink related Business Objects.
     * @param {String} parentbusobid Specify the Business Object ID for the parent Business Object.
     * @param {String} parentbusobrecid Specify the record ID for the parent Business Object.
     * @param {String} relationshipid Specify the Relationship ID for the related Business Object you want to unlink.
     * @param {String} busobid Specify the Business Object ID of the Business Object to be unlinked.
     * @param {String} busobrecid Specify the Business Object record ID of the Business Object to be unlinked.
     * @param {module:api/BusinessObjectApi~businessObjectUnLinkRelatedBusinessObjectByRecIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RelatedBusinessObjectResponse}
     */
    this.businessObjectUnLinkRelatedBusinessObjectByRecIdV1 = function(parentbusobid, parentbusobrecid, relationshipid, busobid, busobrecid, callback) {
      var postBody = null;

      // verify the required parameter 'parentbusobid' is set
      if (parentbusobid === undefined || parentbusobid === null) {
        throw new Error("Missing the required parameter 'parentbusobid' when calling businessObjectUnLinkRelatedBusinessObjectByRecIdV1");
      }

      // verify the required parameter 'parentbusobrecid' is set
      if (parentbusobrecid === undefined || parentbusobrecid === null) {
        throw new Error("Missing the required parameter 'parentbusobrecid' when calling businessObjectUnLinkRelatedBusinessObjectByRecIdV1");
      }

      // verify the required parameter 'relationshipid' is set
      if (relationshipid === undefined || relationshipid === null) {
        throw new Error("Missing the required parameter 'relationshipid' when calling businessObjectUnLinkRelatedBusinessObjectByRecIdV1");
      }

      // verify the required parameter 'busobid' is set
      if (busobid === undefined || busobid === null) {
        throw new Error("Missing the required parameter 'busobid' when calling businessObjectUnLinkRelatedBusinessObjectByRecIdV1");
      }

      // verify the required parameter 'busobrecid' is set
      if (busobrecid === undefined || busobrecid === null) {
        throw new Error("Missing the required parameter 'busobrecid' when calling businessObjectUnLinkRelatedBusinessObjectByRecIdV1");
      }


      var pathParams = {
        'parentbusobid': parentbusobid,
        'parentbusobrecid': parentbusobrecid,
        'relationshipid': relationshipid,
        'busobid': busobid,
        'busobrecid': busobrecid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = RelatedBusinessObjectResponse;

      return this.apiClient.callApi(
        '/api/V1/unlinkrelatedbusinessobject/parentbusobid/{parentbusobid}/parentbusobrecid/{parentbusobrecid}/relationshipid/{relationshipid}/busobid/{busobid}/busobrecid/{busobrecid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1Callback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload an attachment by Business Object ID and public ID
     * Operation to upload an attachment to a Business Object record using a Business Object ID and public ID. The body of the request is the byte array of the file part being uploaded.
     * @param {Blob} body 
     * @param {String} filename Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.
     * @param {String} busobid Specify the Business Object ID.
     * @param {String} publicid Specify the Business Object public ID  to attach the file to.
     * @param {Number} offset The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.
     * @param {Number} totalsize The entire file size in bytes.
     * @param {Object} opts Optional parameters
     * @param {String} opts.attachmentid Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded.
     * @param {String} opts.displaytext Specify the attachment name, which is the display text for the attachment record.
     * @param {module:api/BusinessObjectApi~businessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.businessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1 = function(body, filename, busobid, publicid, offset, totalsize, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling businessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1");
      }

      // verify the required parameter 'filename' is set
      if (filename === undefined || filename === null) {
        throw new Error("Missing the required parameter 'filename' when calling businessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1");
      }

      // verify the required parameter 'busobid' is set
      if (busobid === undefined || busobid === null) {
        throw new Error("Missing the required parameter 'busobid' when calling businessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1");
      }

      // verify the required parameter 'publicid' is set
      if (publicid === undefined || publicid === null) {
        throw new Error("Missing the required parameter 'publicid' when calling businessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1");
      }

      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling businessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1");
      }

      // verify the required parameter 'totalsize' is set
      if (totalsize === undefined || totalsize === null) {
        throw new Error("Missing the required parameter 'totalsize' when calling businessObjectUploadBusinessObjectAttachmentByIdAndPublicIdV1");
      }


      var pathParams = {
        'filename': filename,
        'busobid': busobid,
        'publicid': publicid,
        'offset': offset,
        'totalsize': totalsize
      };
      var queryParams = {
        'attachmentid': opts['attachmentid'],
        'displaytext': opts['displaytext'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/octet-stream'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/V1/uploadbusinessobjectattachment/filename/{filename}/busobid/{busobid}/publicid/{publicid}/offset/{offset}/totalsize/{totalsize}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1Callback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload an attachment by Business Object ID and record ID
     * Operation to upload an attachment to a Business Object record using a Business Object ID and record ID. The body of the request is the byte array of the file part being uploaded.
     * @param {Blob} body 
     * @param {String} filename Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.
     * @param {String} busobid Specify the Business Object ID.
     * @param {String} busobrecid Specify the Business Object record ID to attach the file to.
     * @param {Number} offset The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.
     * @param {Number} totalsize The entire file size in bytes.
     * @param {Object} opts Optional parameters
     * @param {String} opts.attachmentid Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded.
     * @param {String} opts.displaytext Specify the attachment name, which is the display text for the attachment record.
     * @param {module:api/BusinessObjectApi~businessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.businessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1 = function(body, filename, busobid, busobrecid, offset, totalsize, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling businessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1");
      }

      // verify the required parameter 'filename' is set
      if (filename === undefined || filename === null) {
        throw new Error("Missing the required parameter 'filename' when calling businessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1");
      }

      // verify the required parameter 'busobid' is set
      if (busobid === undefined || busobid === null) {
        throw new Error("Missing the required parameter 'busobid' when calling businessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1");
      }

      // verify the required parameter 'busobrecid' is set
      if (busobrecid === undefined || busobrecid === null) {
        throw new Error("Missing the required parameter 'busobrecid' when calling businessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1");
      }

      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling businessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1");
      }

      // verify the required parameter 'totalsize' is set
      if (totalsize === undefined || totalsize === null) {
        throw new Error("Missing the required parameter 'totalsize' when calling businessObjectUploadBusinessObjectAttachmentByIdAndRecIdV1");
      }


      var pathParams = {
        'filename': filename,
        'busobid': busobid,
        'busobrecid': busobrecid,
        'offset': offset,
        'totalsize': totalsize
      };
      var queryParams = {
        'attachmentid': opts['attachmentid'],
        'displaytext': opts['displaytext'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/octet-stream'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/V1/uploadbusinessobjectattachment/filename/{filename}/busobid/{busobid}/busobrecid/{busobrecid}/offset/{offset}/totalsize/{totalsize}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1Callback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload an attachment by Business Object name and public ID
     * Operation to upload an attachment to a Business Object record using a Business Object name and public ID. The body of the request is the byte array of the file part being uploaded.
     * @param {Blob} body 
     * @param {String} filename Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.
     * @param {String} busobname Specify the Business Object name.
     * @param {String} publicid Specify the Business Object public ID  to attach the file to.
     * @param {Number} offset The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.
     * @param {Number} totalsize The entire file size in bytes.
     * @param {Object} opts Optional parameters
     * @param {String} opts.attachmentid Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded.
     * @param {String} opts.displaytext Specify the attachment name, which is the display text for the attachment record.
     * @param {module:api/BusinessObjectApi~businessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.businessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1 = function(body, filename, busobname, publicid, offset, totalsize, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling businessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1");
      }

      // verify the required parameter 'filename' is set
      if (filename === undefined || filename === null) {
        throw new Error("Missing the required parameter 'filename' when calling businessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1");
      }

      // verify the required parameter 'busobname' is set
      if (busobname === undefined || busobname === null) {
        throw new Error("Missing the required parameter 'busobname' when calling businessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1");
      }

      // verify the required parameter 'publicid' is set
      if (publicid === undefined || publicid === null) {
        throw new Error("Missing the required parameter 'publicid' when calling businessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1");
      }

      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling businessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1");
      }

      // verify the required parameter 'totalsize' is set
      if (totalsize === undefined || totalsize === null) {
        throw new Error("Missing the required parameter 'totalsize' when calling businessObjectUploadBusinessObjectAttachmentByNameAndPublicIdV1");
      }


      var pathParams = {
        'filename': filename,
        'busobname': busobname,
        'publicid': publicid,
        'offset': offset,
        'totalsize': totalsize
      };
      var queryParams = {
        'attachmentid': opts['attachmentid'],
        'displaytext': opts['displaytext'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/octet-stream'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/V1/uploadbusinessobjectattachment/filename/{filename}/busobname/{busobname}/publicid/{publicid}/offset/{offset}/totalsize/{totalsize}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the businessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1 operation.
     * @callback module:api/BusinessObjectApi~businessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1Callback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload an attachment by Business Object name and record ID
     * Operation to upload an attachment to a Business Object record using a Business Object name and record ID. The body of the request is the byte array of the file part being uploaded.
     * @param {Blob} body 
     * @param {String} filename Specify the name of the file being uploaded. If no attachment name is provided, the file name is used.
     * @param {String} busobname Specify the Business Object name.
     * @param {String} busobrecid Specify the Business Object record ID to attach the file to.
     * @param {Number} offset The offset is the starting index of the file part being uploaded.  If this is the first part then the offset will be zero.
     * @param {Number} totalsize The entire file size in bytes.
     * @param {Object} opts Optional parameters
     * @param {String} opts.attachmentid Specify the attachment ID of an uploaded file to upload subsequent parts and ensure each part gets appended to the parts that have already been uploaded.
     * @param {String} opts.displaytext Specify the attachment name, which is the display text for the attachment record.
     * @param {module:api/BusinessObjectApi~businessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.businessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1 = function(body, filename, busobname, busobrecid, offset, totalsize, opts, callback) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling businessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1");
      }

      // verify the required parameter 'filename' is set
      if (filename === undefined || filename === null) {
        throw new Error("Missing the required parameter 'filename' when calling businessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1");
      }

      // verify the required parameter 'busobname' is set
      if (busobname === undefined || busobname === null) {
        throw new Error("Missing the required parameter 'busobname' when calling businessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1");
      }

      // verify the required parameter 'busobrecid' is set
      if (busobrecid === undefined || busobrecid === null) {
        throw new Error("Missing the required parameter 'busobrecid' when calling businessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1");
      }

      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling businessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1");
      }

      // verify the required parameter 'totalsize' is set
      if (totalsize === undefined || totalsize === null) {
        throw new Error("Missing the required parameter 'totalsize' when calling businessObjectUploadBusinessObjectAttachmentByNameAndRecIdV1");
      }


      var pathParams = {
        'filename': filename,
        'busobname': busobname,
        'busobrecid': busobrecid,
        'offset': offset,
        'totalsize': totalsize
      };
      var queryParams = {
        'attachmentid': opts['attachmentid'],
        'displaytext': opts['displaytext'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/octet-stream'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/V1/uploadbusinessobjectattachment/filename/{filename}/busobname/{busobname}/busobrecid/{busobrecid}/offset/{offset}/totalsize/{totalsize}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
