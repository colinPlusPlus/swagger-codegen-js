/**
 * Cherwell Rest API
 * <a href=\"../../index.html\">Cherwell Rest API Documentation</a><br>Select version options from the header drop-down list (to the left of the Client Key box). Then, click Explore to view different versions of operations.
 *
 * OpenAPI spec version: 9.2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/User', 'model/UserBatchDeleteRequest', 'model/UserBatchDeleteResponse', 'model/UserBatchDeleteV2Response', 'model/UserBatchReadRequest', 'model/UserBatchReadResponse', 'model/UserBatchSaveRequest', 'model/UserBatchSaveResponse', 'model/UserBatchSaveV2Request', 'model/UserBatchSaveV2Response', 'model/UserDeleteResponse', 'model/UserDeleteV2Response', 'model/UserListResponse', 'model/UserReadResponse', 'model/UserReadV2Response', 'model/UserSaveRequest', 'model/UserSaveResponse', 'model/UserSaveV2Request', 'model/UserSaveV2Response', 'model/UserV2'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/User'), require('../model/UserBatchDeleteRequest'), require('../model/UserBatchDeleteResponse'), require('../model/UserBatchDeleteV2Response'), require('../model/UserBatchReadRequest'), require('../model/UserBatchReadResponse'), require('../model/UserBatchSaveRequest'), require('../model/UserBatchSaveResponse'), require('../model/UserBatchSaveV2Request'), require('../model/UserBatchSaveV2Response'), require('../model/UserDeleteResponse'), require('../model/UserDeleteV2Response'), require('../model/UserListResponse'), require('../model/UserReadResponse'), require('../model/UserReadV2Response'), require('../model/UserSaveRequest'), require('../model/UserSaveResponse'), require('../model/UserSaveV2Request'), require('../model/UserSaveV2Response'), require('../model/UserV2'));
  } else {
    // Browser globals (root is window)
    if (!root.CherwellRestApi) {
      root.CherwellRestApi = {};
    }
    root.CherwellRestApi.UsersApi = factory(root.CherwellRestApi.ApiClient, root.CherwellRestApi.User, root.CherwellRestApi.UserBatchDeleteRequest, root.CherwellRestApi.UserBatchDeleteResponse, root.CherwellRestApi.UserBatchDeleteV2Response, root.CherwellRestApi.UserBatchReadRequest, root.CherwellRestApi.UserBatchReadResponse, root.CherwellRestApi.UserBatchSaveRequest, root.CherwellRestApi.UserBatchSaveResponse, root.CherwellRestApi.UserBatchSaveV2Request, root.CherwellRestApi.UserBatchSaveV2Response, root.CherwellRestApi.UserDeleteResponse, root.CherwellRestApi.UserDeleteV2Response, root.CherwellRestApi.UserListResponse, root.CherwellRestApi.UserReadResponse, root.CherwellRestApi.UserReadV2Response, root.CherwellRestApi.UserSaveRequest, root.CherwellRestApi.UserSaveResponse, root.CherwellRestApi.UserSaveV2Request, root.CherwellRestApi.UserSaveV2Response, root.CherwellRestApi.UserV2);
  }
}(this, function(ApiClient, User, UserBatchDeleteRequest, UserBatchDeleteResponse, UserBatchDeleteV2Response, UserBatchReadRequest, UserBatchReadResponse, UserBatchSaveRequest, UserBatchSaveResponse, UserBatchSaveV2Request, UserBatchSaveV2Response, UserDeleteResponse, UserDeleteV2Response, UserListResponse, UserReadResponse, UserReadV2Response, UserSaveRequest, UserSaveResponse, UserSaveV2Request, UserSaveV2Response, UserV2) {
  'use strict';

  /**
   * Users service.
   * @module api/UsersApi
   * @version 9.2.0
   */

  /**
   * Constructs a new UsersApi. 
   * @alias module:api/UsersApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the usersDeleteUserBatchV1 operation.
     * @callback module:api/UsersApi~usersDeleteUserBatchV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UserBatchDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a batch of users
     * Operation to delete a batch of users. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
     * @param {module:model/UserBatchDeleteRequest} request Request object listing record IDs for users to be deleted and an error flag.
     * @param {module:api/UsersApi~usersDeleteUserBatchV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserBatchDeleteResponse}
     */
    this.usersDeleteUserBatchV1 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling usersDeleteUserBatchV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = UserBatchDeleteResponse;

      return this.apiClient.callApi(
        '/api/V1/deleteuserbatch', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersDeleteUserBatchV2 operation.
     * @callback module:api/UsersApi~usersDeleteUserBatchV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UserBatchDeleteV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a batch of users
     * Operation to delete a batch of users. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
     * @param {module:model/UserBatchDeleteRequest} request Request object listing record IDs for users to be deleted and an error flag.
     * @param {module:api/UsersApi~usersDeleteUserBatchV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserBatchDeleteV2Response}
     */
    this.usersDeleteUserBatchV2 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling usersDeleteUserBatchV2");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = UserBatchDeleteV2Response;

      return this.apiClient.callApi(
        '/api/V2/deleteuserbatch', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersDeleteUserV1 operation.
     * @callback module:api/UsersApi~usersDeleteUserV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user by record ID
     * Operation to delete a user by record ID. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
     * @param {String} userrecordid Specify the record ID of the user you want to delete
     * @param {module:api/UsersApi~usersDeleteUserV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDeleteResponse}
     */
    this.usersDeleteUserV1 = function(userrecordid, callback) {
      var postBody = null;

      // verify the required parameter 'userrecordid' is set
      if (userrecordid === undefined || userrecordid === null) {
        throw new Error("Missing the required parameter 'userrecordid' when calling usersDeleteUserV1");
      }


      var pathParams = {
        'userrecordid': userrecordid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = UserDeleteResponse;

      return this.apiClient.callApi(
        '/api/V1/deleteuser/userrecordid/{userrecordid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersDeleteUserV2 operation.
     * @callback module:api/UsersApi~usersDeleteUserV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDeleteV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a user by record ID
     * Operation to delete a user by record ID. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
     * @param {String} userrecordid Specify the record ID of the user you want to delete
     * @param {module:api/UsersApi~usersDeleteUserV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDeleteV2Response}
     */
    this.usersDeleteUserV2 = function(userrecordid, callback) {
      var postBody = null;

      // verify the required parameter 'userrecordid' is set
      if (userrecordid === undefined || userrecordid === null) {
        throw new Error("Missing the required parameter 'userrecordid' when calling usersDeleteUserV2");
      }


      var pathParams = {
        'userrecordid': userrecordid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = UserDeleteV2Response;

      return this.apiClient.callApi(
        '/api/V2/deleteuser/userrecordid/{userrecordid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetListOfUsers operation.
     * @callback module:api/UsersApi~usersGetListOfUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all system users.
     * Operation to get a list of all system users.
     * @param {module:model/String} loginidfilter Specify the login ID filter to apply to the users list.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.stoponerror Specify whether the operation is interrupted if retrieving any user causes an error.
     * @param {module:api/UsersApi~usersGetListOfUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserListResponse}
     */
    this.usersGetListOfUsers = function(loginidfilter, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'loginidfilter' is set
      if (loginidfilter === undefined || loginidfilter === null) {
        throw new Error("Missing the required parameter 'loginidfilter' when calling usersGetListOfUsers");
      }


      var pathParams = {
      };
      var queryParams = {
        'loginidfilter': loginidfilter,
        'stoponerror': opts['stoponerror'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = UserListResponse;

      return this.apiClient.callApi(
        '/api/V1/getlistofusers', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetUserBatchV1 operation.
     * @callback module:api/UsersApi~usersGetUserBatchV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UserBatchReadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user information in a batch
     * Operation to get user information in a batch. To get record IDs, use \&quot;Get a user by login ID\&quot; or \&quot;Get a user by public id.\&quot;
     * @param {module:model/UserBatchReadRequest} request Request object that lists user record IDs or public IDs of users and an error flag.
     * @param {module:api/UsersApi~usersGetUserBatchV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserBatchReadResponse}
     */
    this.usersGetUserBatchV1 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling usersGetUserBatchV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = UserBatchReadResponse;

      return this.apiClient.callApi(
        '/api/V1/getuserbatch', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetUserByLoginIdV1 operation.
     * @callback module:api/UsersApi~usersGetUserByLoginIdV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user by login ID
     * Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example. This operation has been deprecated by a V2 operation of the same name, but with query string parameters.
     * @param {String} loginid Specify the user&#39;s login ID.
     * @param {module:api/UsersApi~usersGetUserByLoginIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.usersGetUserByLoginIdV1 = function(loginid, callback) {
      var postBody = null;

      // verify the required parameter 'loginid' is set
      if (loginid === undefined || loginid === null) {
        throw new Error("Missing the required parameter 'loginid' when calling usersGetUserByLoginIdV1");
      }


      var pathParams = {
        'loginid': loginid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = User;

      return this.apiClient.callApi(
        '/api/V1/getuserbyloginid/loginid/{loginid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetUserByLoginIdV2 operation.
     * @callback module:api/UsersApi~usersGetUserByLoginIdV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user by login ID and login ID type
     * Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example.
     * @param {String} loginid Specify the user&#39;s login ID.
     * @param {module:model/String} loginidtype Specify the login ID type.
     * @param {module:api/UsersApi~usersGetUserByLoginIdV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.usersGetUserByLoginIdV2 = function(loginid, loginidtype, callback) {
      var postBody = null;

      // verify the required parameter 'loginid' is set
      if (loginid === undefined || loginid === null) {
        throw new Error("Missing the required parameter 'loginid' when calling usersGetUserByLoginIdV2");
      }

      // verify the required parameter 'loginidtype' is set
      if (loginidtype === undefined || loginidtype === null) {
        throw new Error("Missing the required parameter 'loginidtype' when calling usersGetUserByLoginIdV2");
      }


      var pathParams = {
      };
      var queryParams = {
        'loginid': loginid,
        'loginidtype': loginidtype,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = User;

      return this.apiClient.callApi(
        '/api/V2/getuserbyloginid', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetUserByLoginIdV3 operation.
     * @callback module:api/UsersApi~usersGetUserByLoginIdV3Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UserV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user by login ID and login ID type
     * Operation to get detailed user information by login ID. Use to get user record IDs and account settings, for example.
     * @param {String} loginid Specify the user&#39;s login ID.
     * @param {module:model/String} loginidtype Specify the login ID type.
     * @param {module:api/UsersApi~usersGetUserByLoginIdV3Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserV2}
     */
    this.usersGetUserByLoginIdV3 = function(loginid, loginidtype, callback) {
      var postBody = null;

      // verify the required parameter 'loginid' is set
      if (loginid === undefined || loginid === null) {
        throw new Error("Missing the required parameter 'loginid' when calling usersGetUserByLoginIdV3");
      }

      // verify the required parameter 'loginidtype' is set
      if (loginidtype === undefined || loginidtype === null) {
        throw new Error("Missing the required parameter 'loginidtype' when calling usersGetUserByLoginIdV3");
      }


      var pathParams = {
      };
      var queryParams = {
        'loginid': loginid,
        'loginidtype': loginidtype,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = UserV2;

      return this.apiClient.callApi(
        '/api/V3/getuserbyloginid', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetUserByPublicIdV1 operation.
     * @callback module:api/UsersApi~usersGetUserByPublicIdV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UserReadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user by public ID
     * Operation to get detailed user information by public ID. Use to get user record IDs and account settings, for example.
     * @param {String} publicid Specify the user&#39;s public ID.
     * @param {module:api/UsersApi~usersGetUserByPublicIdV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserReadResponse}
     */
    this.usersGetUserByPublicIdV1 = function(publicid, callback) {
      var postBody = null;

      // verify the required parameter 'publicid' is set
      if (publicid === undefined || publicid === null) {
        throw new Error("Missing the required parameter 'publicid' when calling usersGetUserByPublicIdV1");
      }


      var pathParams = {
        'publicid': publicid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = UserReadResponse;

      return this.apiClient.callApi(
        '/api/V1/getuserbypublicid/publicid/{publicid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetUserByPublicIdV2 operation.
     * @callback module:api/UsersApi~usersGetUserByPublicIdV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UserReadV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user by public ID
     * Operation to get detailed user information by public ID. Use to get user record IDs and account settings, for example.
     * @param {String} publicid Specify the user&#39;s public ID.
     * @param {module:api/UsersApi~usersGetUserByPublicIdV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserReadV2Response}
     */
    this.usersGetUserByPublicIdV2 = function(publicid, callback) {
      var postBody = null;

      // verify the required parameter 'publicid' is set
      if (publicid === undefined || publicid === null) {
        throw new Error("Missing the required parameter 'publicid' when calling usersGetUserByPublicIdV2");
      }


      var pathParams = {
        'publicid': publicid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = UserReadV2Response;

      return this.apiClient.callApi(
        '/api/V2/getuserbypublicid/publicid/{publicid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGetUserByRecId operation.
     * @callback module:api/UsersApi~usersGetUserByRecIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserV2} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a user by record ID
     * Operation to get detailed user information by record ID.  Use to get user public IDs and account settings, for example.
     * @param {String} recid Specify the user&#39;s record ID
     * @param {module:api/UsersApi~usersGetUserByRecIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserV2}
     */
    this.usersGetUserByRecId = function(recid, callback) {
      var postBody = null;

      // verify the required parameter 'recid' is set
      if (recid === undefined || recid === null) {
        throw new Error("Missing the required parameter 'recid' when calling usersGetUserByRecId");
      }


      var pathParams = {
        'recid': recid
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = UserV2;

      return this.apiClient.callApi(
        '/api/V1/getuserbyrecid/recid/{recid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersSaveUserBatchV1 operation.
     * @callback module:api/UsersApi~usersSaveUserBatchV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UserBatchSaveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update users in a batch
     * Operation to create or update users in a batch. To update, specify record ID. To create, leave record ID empty.
     * @param {module:model/UserBatchSaveRequest} request Request object listing user record IDs and an error flag.
     * @param {module:api/UsersApi~usersSaveUserBatchV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserBatchSaveResponse}
     */
    this.usersSaveUserBatchV1 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling usersSaveUserBatchV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = UserBatchSaveResponse;

      return this.apiClient.callApi(
        '/api/V1/saveuserbatch', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersSaveUserBatchV2 operation.
     * @callback module:api/UsersApi~usersSaveUserBatchV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UserBatchSaveV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update users in a batch
     * Operation to create or update users in a batch. To update, specify record ID. To create, leave record ID empty.
     * @param {module:model/UserBatchSaveV2Request} request Request object listing user record IDs and an error flag.
     * @param {module:api/UsersApi~usersSaveUserBatchV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserBatchSaveV2Response}
     */
    this.usersSaveUserBatchV2 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling usersSaveUserBatchV2");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = UserBatchSaveV2Response;

      return this.apiClient.callApi(
        '/api/V2/saveuserbatch', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersSaveUserV1 operation.
     * @callback module:api/UsersApi~usersSaveUserV1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UserSaveResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a user
     * Operation to create or update a user.  The response is a collection because if you use a public ID, more than one user could be updated since public IDs may not be unique. 
     * @param {module:model/UserSaveRequest} request Request object to specify user parameters and fields with values to be created or updated. The loginId and either the busObRecId or busObPublicId are required.
     * @param {module:api/UsersApi~usersSaveUserV1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserSaveResponse}
     */
    this.usersSaveUserV1 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling usersSaveUserV1");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = UserSaveResponse;

      return this.apiClient.callApi(
        '/api/V1/saveuser', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the usersSaveUserV2 operation.
     * @callback module:api/UsersApi~usersSaveUserV2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/UserSaveV2Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a user
     * Operation to create or update a user.  The response is a collection because if you use a public ID, more than one user could be updated since public IDs may not be unique. 
     * @param {module:model/UserSaveV2Request} request Request object to specify user parameters and fields with values to be created or updated. The loginId and either the busObRecId or busObPublicId are required.
     * @param {module:api/UsersApi~usersSaveUserV2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserSaveV2Response}
     */
    this.usersSaveUserV2 = function(request, callback) {
      var postBody = request;

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling usersSaveUserV2");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['oauth2'];
      var contentTypes = ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = UserSaveV2Response;

      return this.apiClient.callApi(
        '/api/V2/saveuser', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
