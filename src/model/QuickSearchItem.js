/**
 * Cherwell Rest API
 * <a href=\"../../index.html\">Cherwell Rest API Documentation</a><br>Select version options from the header drop-down list (to the left of the Client Key box). Then, click Explore to view different versions of operations.
 *
 * OpenAPI spec version: 9.2.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ChangedLimit', 'model/KeyValuePairStringString'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./ChangedLimit'), require('./KeyValuePairStringString'));
  } else {
    // Browser globals (root is window)
    if (!root.CherwellRestApi) {
      root.CherwellRestApi = {};
    }
    root.CherwellRestApi.QuickSearchItem = factory(root.CherwellRestApi.ApiClient, root.CherwellRestApi.ChangedLimit, root.CherwellRestApi.KeyValuePairStringString);
  }
}(this, function(ApiClient, ChangedLimit, KeyValuePairStringString) {
  'use strict';




  /**
   * The QuickSearchItem model module.
   * @module model/QuickSearchItem
   * @version 9.2.0
   */

  /**
   * Constructs a new <code>QuickSearchItem</code>.
   * @alias module:model/QuickSearchItem
   * @class
   */
  var exports = function() {
    var _this = this;


















  };

  /**
   * Constructs a <code>QuickSearchItem</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/QuickSearchItem} obj Optional instance to populate.
   * @return {module:model/QuickSearchItem} The populated <code>QuickSearchItem</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('ascending')) {
        obj['ascending'] = ApiClient.convertToType(data['ascending'], 'Boolean');
      }
      if (data.hasOwnProperty('changedLimits')) {
        obj['changedLimits'] = ApiClient.convertToType(data['changedLimits'], [ChangedLimit]);
      }
      if (data.hasOwnProperty('changedOption')) {
        obj['changedOption'] = ApiClient.convertToType(data['changedOption'], 'String');
      }
      if (data.hasOwnProperty('displayName')) {
        obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
      }
      if (data.hasOwnProperty('galleryImage')) {
        obj['galleryImage'] = ApiClient.convertToType(data['galleryImage'], 'String');
      }
      if (data.hasOwnProperty('hasAnyOptions')) {
        obj['hasAnyOptions'] = ApiClient.convertToType(data['hasAnyOptions'], 'Boolean');
      }
      if (data.hasOwnProperty('nonFinalStateOption')) {
        obj['nonFinalStateOption'] = ApiClient.convertToType(data['nonFinalStateOption'], 'String');
      }
      if (data.hasOwnProperty('searchAnyWordsOption')) {
        obj['searchAnyWordsOption'] = ApiClient.convertToType(data['searchAnyWordsOption'], 'String');
      }
      if (data.hasOwnProperty('searchAttachmentsOption')) {
        obj['searchAttachmentsOption'] = ApiClient.convertToType(data['searchAttachmentsOption'], 'String');
      }
      if (data.hasOwnProperty('searchRelatedOption')) {
        obj['searchRelatedOption'] = ApiClient.convertToType(data['searchRelatedOption'], 'String');
      }
      if (data.hasOwnProperty('searchTargetId')) {
        obj['searchTargetId'] = ApiClient.convertToType(data['searchTargetId'], 'String');
      }
      if (data.hasOwnProperty('searchTargetType')) {
        obj['searchTargetType'] = ApiClient.convertToType(data['searchTargetType'], 'String');
      }
      if (data.hasOwnProperty('selectedChangedLimit')) {
        obj['selectedChangedLimit'] = ChangedLimit.constructFromObject(data['selectedChangedLimit']);
      }
      if (data.hasOwnProperty('selectedSortByFieldId')) {
        obj['selectedSortByFieldId'] = ApiClient.convertToType(data['selectedSortByFieldId'], 'String');
      }
      if (data.hasOwnProperty('sortByFields')) {
        obj['sortByFields'] = ApiClient.convertToType(data['sortByFields'], [KeyValuePairStringString]);
      }
      if (data.hasOwnProperty('sortByOption')) {
        obj['sortByOption'] = ApiClient.convertToType(data['sortByOption'], 'String');
      }
      if (data.hasOwnProperty('watermarkText')) {
        obj['watermarkText'] = ApiClient.convertToType(data['watermarkText'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {Boolean} ascending
   */
  exports.prototype['ascending'] = undefined;
  /**
   * @member {Array.<module:model/ChangedLimit>} changedLimits
   */
  exports.prototype['changedLimits'] = undefined;
  /**
   * @member {module:model/QuickSearchItem.ChangedOptionEnum} changedOption
   */
  exports.prototype['changedOption'] = undefined;
  /**
   * @member {String} displayName
   */
  exports.prototype['displayName'] = undefined;
  /**
   * @member {String} galleryImage
   */
  exports.prototype['galleryImage'] = undefined;
  /**
   * @member {Boolean} hasAnyOptions
   */
  exports.prototype['hasAnyOptions'] = undefined;
  /**
   * @member {module:model/QuickSearchItem.NonFinalStateOptionEnum} nonFinalStateOption
   */
  exports.prototype['nonFinalStateOption'] = undefined;
  /**
   * @member {module:model/QuickSearchItem.SearchAnyWordsOptionEnum} searchAnyWordsOption
   */
  exports.prototype['searchAnyWordsOption'] = undefined;
  /**
   * @member {module:model/QuickSearchItem.SearchAttachmentsOptionEnum} searchAttachmentsOption
   */
  exports.prototype['searchAttachmentsOption'] = undefined;
  /**
   * @member {module:model/QuickSearchItem.SearchRelatedOptionEnum} searchRelatedOption
   */
  exports.prototype['searchRelatedOption'] = undefined;
  /**
   * @member {String} searchTargetId
   */
  exports.prototype['searchTargetId'] = undefined;
  /**
   * @member {module:model/QuickSearchItem.SearchTargetTypeEnum} searchTargetType
   */
  exports.prototype['searchTargetType'] = undefined;
  /**
   * @member {module:model/ChangedLimit} selectedChangedLimit
   */
  exports.prototype['selectedChangedLimit'] = undefined;
  /**
   * @member {String} selectedSortByFieldId
   */
  exports.prototype['selectedSortByFieldId'] = undefined;
  /**
   * @member {Array.<module:model/KeyValuePairStringString>} sortByFields
   */
  exports.prototype['sortByFields'] = undefined;
  /**
   * @member {module:model/QuickSearchItem.SortByOptionEnum} sortByOption
   */
  exports.prototype['sortByOption'] = undefined;
  /**
   * @member {String} watermarkText
   */
  exports.prototype['watermarkText'] = undefined;


  /**
   * Allowed values for the <code>changedOption</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ChangedOptionEnum = {
    /**
     * value: "None"
     * @const
     */
    "None": "None",
    /**
     * value: "Use"
     * @const
     */
    "Use": "Use",
    /**
     * value: "Display"
     * @const
     */
    "Display": "Display",
    /**
     * value: "UseAndDisplay"
     * @const
     */
    "UseAndDisplay": "UseAndDisplay"  };

  /**
   * Allowed values for the <code>nonFinalStateOption</code> property.
   * @enum {String}
   * @readonly
   */
  exports.NonFinalStateOptionEnum = {
    /**
     * value: "None"
     * @const
     */
    "None": "None",
    /**
     * value: "Use"
     * @const
     */
    "Use": "Use",
    /**
     * value: "Display"
     * @const
     */
    "Display": "Display",
    /**
     * value: "UseAndDisplay"
     * @const
     */
    "UseAndDisplay": "UseAndDisplay"  };

  /**
   * Allowed values for the <code>searchAnyWordsOption</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SearchAnyWordsOptionEnum = {
    /**
     * value: "None"
     * @const
     */
    "None": "None",
    /**
     * value: "Use"
     * @const
     */
    "Use": "Use",
    /**
     * value: "Display"
     * @const
     */
    "Display": "Display",
    /**
     * value: "UseAndDisplay"
     * @const
     */
    "UseAndDisplay": "UseAndDisplay"  };

  /**
   * Allowed values for the <code>searchAttachmentsOption</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SearchAttachmentsOptionEnum = {
    /**
     * value: "None"
     * @const
     */
    "None": "None",
    /**
     * value: "Use"
     * @const
     */
    "Use": "Use",
    /**
     * value: "Display"
     * @const
     */
    "Display": "Display",
    /**
     * value: "UseAndDisplay"
     * @const
     */
    "UseAndDisplay": "UseAndDisplay"  };

  /**
   * Allowed values for the <code>searchRelatedOption</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SearchRelatedOptionEnum = {
    /**
     * value: "None"
     * @const
     */
    "None": "None",
    /**
     * value: "Use"
     * @const
     */
    "Use": "Use",
    /**
     * value: "Display"
     * @const
     */
    "Display": "Display",
    /**
     * value: "UseAndDisplay"
     * @const
     */
    "UseAndDisplay": "UseAndDisplay"  };

  /**
   * Allowed values for the <code>searchTargetType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SearchTargetTypeEnum = {
    /**
     * value: "BusOb"
     * @const
     */
    "BusOb": "BusOb",
    /**
     * value: "DocRepository"
     * @const
     */
    "DocRepository": "DocRepository"  };

  /**
   * Allowed values for the <code>sortByOption</code> property.
   * @enum {String}
   * @readonly
   */
  exports.SortByOptionEnum = {
    /**
     * value: "None"
     * @const
     */
    "None": "None",
    /**
     * value: "Use"
     * @const
     */
    "Use": "Use",
    /**
     * value: "Display"
     * @const
     */
    "Display": "Display",
    /**
     * value: "UseAndDisplay"
     * @const
     */
    "UseAndDisplay": "UseAndDisplay"  };


  return exports;
}));


